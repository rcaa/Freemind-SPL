//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.02.23 at 11:11:43 GMT+01:00 
//


package freemind.controller.actions.generated.instance.impl;

public class PluginTypeImpl implements freemind.controller.actions.generated.instance.PluginType, com.sun.xml.bind.JAXBObject, freemind.controller.actions.generated.instance.impl.runtime.UnmarshallableObject, freemind.controller.actions.generated.instance.impl.runtime.XMLSerializable, freemind.controller.actions.generated.instance.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _PluginAction = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _PluginClasspath = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _PluginRegistration = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _PluginStrings = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    public final static java.lang.Class version = (freemind.controller.actions.generated.instance.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (freemind.controller.actions.generated.instance.PluginType.class);
    }

    public java.util.List getPluginAction() {
        return _PluginAction;
    }

    public java.util.List getPluginClasspath() {
        return _PluginClasspath;
    }

    public java.util.List getPluginRegistration() {
        return _PluginRegistration;
    }

    public java.util.List getPluginStrings() {
        return _PluginStrings;
    }

    public freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler createUnmarshaller(freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
        return new freemind.controller.actions.generated.instance.impl.PluginTypeImpl.Unmarshaller(context);
    }

    public void serializeElementBody(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _PluginAction.size();
        int idx2 = 0;
        final int len2 = _PluginClasspath.size();
        int idx3 = 0;
        final int len3 = _PluginRegistration.size();
        int idx4 = 0;
        final int len4 = _PluginStrings.size();
        while (idx2 != len2) {
            if (_PluginClasspath.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx2 ++)));
            } else {
                context.startElement("", "plugin_classpath");
                int idx_0 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx_0 ++)));
                context.endNamespaceDecls();
                int idx_1 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx_1 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx2 ++)));
                context.endElement();
            }
        }
        while (idx3 != len3) {
            if (_PluginRegistration.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx3 ++)));
            } else {
                context.startElement("", "plugin_registration");
                int idx_2 = idx3;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx_2 ++)));
                context.endNamespaceDecls();
                int idx_3 = idx3;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx_3 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx3 ++)));
                context.endElement();
            }
        }
        while (idx1 != len1) {
            if (_PluginAction.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx1 ++)));
            } else {
                context.startElement("", "plugin_action");
                int idx_4 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx_4 ++)));
                context.endNamespaceDecls();
                int idx_5 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx_5 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx1 ++)));
                context.endElement();
            }
        }
        while (idx4 != len4) {
            if (_PluginStrings.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx4 ++)));
            } else {
                context.startElement("", "plugin_strings");
                int idx_6 = idx4;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx_6 ++)));
                context.endNamespaceDecls();
                int idx_7 = idx4;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx_7 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx4 ++)));
                context.endElement();
            }
        }
    }

    public void serializeAttributes(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _PluginAction.size();
        int idx2 = 0;
        final int len2 = _PluginClasspath.size();
        int idx3 = 0;
        final int len3 = _PluginRegistration.size();
        int idx4 = 0;
        final int len4 = _PluginStrings.size();
    }

    public void serializeAttributeBody(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _PluginAction.size();
        int idx2 = 0;
        final int len2 = _PluginClasspath.size();
        int idx3 = 0;
        final int len3 = _PluginRegistration.size();
        int idx4 = 0;
        final int len4 = _PluginStrings.size();
        while (idx2 != len2) {
            if (_PluginClasspath.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx2 ++)));
            } else {
                context.startElement("", "plugin_classpath");
                int idx_0 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx_0 ++)));
                context.endNamespaceDecls();
                int idx_1 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx_1 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginClasspath.get(idx2 ++)));
                context.endElement();
            }
        }
        while (idx3 != len3) {
            if (_PluginRegistration.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx3 ++)));
            } else {
                context.startElement("", "plugin_registration");
                int idx_2 = idx3;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx_2 ++)));
                context.endNamespaceDecls();
                int idx_3 = idx3;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx_3 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginRegistration.get(idx3 ++)));
                context.endElement();
            }
        }
        while (idx1 != len1) {
            if (_PluginAction.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx1 ++)));
            } else {
                context.startElement("", "plugin_action");
                int idx_4 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx_4 ++)));
                context.endNamespaceDecls();
                int idx_5 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx_5 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginAction.get(idx1 ++)));
                context.endElement();
            }
        }
        while (idx4 != len4) {
            if (_PluginStrings.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx4 ++)));
            } else {
                context.startElement("", "plugin_strings");
                int idx_6 = idx4;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx_6 ++)));
                context.endNamespaceDecls();
                int idx_7 = idx4;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx_7 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginStrings.get(idx4 ++)));
                context.endElement();
            }
        }
    }

    public void serializeURIs(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _PluginAction.size();
        int idx2 = 0;
        final int len2 = _PluginClasspath.size();
        int idx3 = 0;
        final int len3 = _PluginRegistration.size();
        int idx4 = 0;
        final int len4 = _PluginStrings.size();
    }

    public java.lang.Class getPrimaryInterface() {
        return (freemind.controller.actions.generated.instance.PluginType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0005\u00fe\u0089\u00dbppsq\u0000~\u0000\u0000\u0004~\u00e7cppsq\u0000~\u0000\u0000\u0002"
+"\u00ffD\u00ebppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001\u007f\u00a2sp"
+"psr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun."
+"msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001\u007f\u00a2hsr\u0000\u0011java"
+".lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\b\u0001\u007f\u00a2eq\u0000~\u0000\u000epsr\u0000\'com."
+"sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000"
+"\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Elem"
+"entExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentMode"
+"lq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00bf\u00d17q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,pp\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000"
+"~\u0000\u000epsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~"
+"\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0011xq\u0000~\u0000\u0003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epsr\u00002com.sun.msv.grammar.E"
+"xpression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\r\u0001psr"
+"\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv"
+".grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expre"
+"ssion$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u001bq\u0000~\u0000 sr\u0000#co"
+"m.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012L"
+"java/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u0000Bfreemind.contr"
+"oller.actions.generated.instance.PluginClasspathTypet\u0000+http:"
+"//java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000!t\u0000\u0010plugin_classp"
+"atht\u0000\u0000sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1"
+"\u0013q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000>freemind.controller.actions.g"
+"enerated.instance.PluginClasspathq\u0000~\u0000%q\u0000~\u0000 sq\u0000~\u0000\b\u0001\u007f\u00a2sppsq\u0000~\u0000"
+"\n\u0001\u007f\u00a2hq\u0000~\u0000\u000epsq\u0000~\u0000\b\u0001\u007f\u00a2eq\u0000~\u0000\u000epsq\u0000~\u0000\u0010\u0000\u00bf\u00d17q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,pp\u0000sq\u0000"
+"~\u0000\b\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~"
+"\u0000!t\u0000Efreemind.controller.actions.generated.instance.PluginRe"
+"gistrationTypeq\u0000~\u0000%sq\u0000~\u0000!t\u0000\u0013plugin_registrationq\u0000~\u0000(sq\u0000~\u0000\u0010\u0000\u00bf"
+"\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000"
+"~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000Afreemind.controller.actions.generated.insta"
+"nce.PluginRegistrationq\u0000~\u0000%q\u0000~\u0000 sq\u0000~\u0000\b\u0001\u007f\u00a2sppsq\u0000~\u0000\n\u0001\u007f\u00a2hq\u0000~\u0000\u000ep"
+"sq\u0000~\u0000\b\u0001\u007f\u00a2eq\u0000~\u0000\u000epsq\u0000~\u0000\u0010\u0000\u00bf\u00d17q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,pp\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq"
+"\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000?freemi"
+"nd.controller.actions.generated.instance.PluginActionTypeq\u0000~"
+"\u0000%sq\u0000~\u0000!t\u0000\rplugin_actionq\u0000~\u0000(sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq"
+"\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000;freemi"
+"nd.controller.actions.generated.instance.PluginActionq\u0000~\u0000%q\u0000"
+"~\u0000 sq\u0000~\u0000\b\u0001\u007f\u00a2sppsq\u0000~\u0000\n\u0001\u007f\u00a2hq\u0000~\u0000\u000epsq\u0000~\u0000\b\u0001\u007f\u00a2eq\u0000~\u0000\u000epsq\u0000~\u0000\u0010\u0000\u00bf\u00d17q\u0000~"
+"\u0000\u000ep\u0000sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,pp\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000e"
+"pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000@freemind.controller.actions.generat"
+"ed.instance.PluginStringsTypeq\u0000~\u0000%sq\u0000~\u0000!t\u0000\u000eplugin_stringsq\u0000~"
+"\u0000(sq\u0000~\u0000\u0010\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\b\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u0000\u0017\u0000\u00bf\u00d1\u0013q\u0000~"
+"\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000<freemind.controller.actions.gener"
+"ated.instance.PluginStringsq\u0000~\u0000%q\u0000~\u0000 sr\u0000\"com.sun.msv.grammar"
+".ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar"
+"/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Express"
+"ionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000"
+"~\u0000f[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\u001f\u0000\u0000\u00009pur"
+"\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfpppppppp"
+"ppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0016q\u0000~\u0000+q\u0000~\u00005q\u0000~\u0000=q\u0000"
+"~\u0000Gq\u0000~\u0000Oq\u0000~\u0000Yq\u0000~\u0000apppq\u0000~\u0000\u0015q\u0000~\u0000*q\u0000~\u00004q\u0000~\u0000<q\u0000~\u0000Fq\u0000~\u0000Nq\u0000~\u0000Xq\u0000~\u0000"
+"`pppppppppppppppppppppppppppppq\u0000~\u0000\u0005ppppppppppppppppppppppq\u0000~"
+"\u0000\u0006ppppppppppppppppppppppq\u0000~\u0000\u0007ppppppppq\u0000~\u0000\u000fq\u0000~\u00001q\u0000~\u0000Cq\u0000~\u0000\fq\u0000~"
+"\u00000q\u0000~\u0000Bq\u0000~\u0000Uq\u0000~\u0000Tppppppq\u0000~\u0000\tq\u0000~\u0000/q\u0000~\u0000Aq\u0000~\u0000Sppppppppppppppppp"
+"ppppppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends freemind.controller.actions.generated.instance.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------");
        }

        protected Unmarshaller(freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return freemind.controller.actions.generated.instance.impl.PluginTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        if (("plugin_classpath" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        if (("plugin_registration" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "jar");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  0 :
                        if (("plugin_classpath" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  6 :
                        if (("plugin_registration" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("plugin_action" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  4 :
                        attIdx = context.getAttribute("", "isPluginBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  10 :
                        attIdx = context.getAttribute("", "language");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "key_stroke");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "base");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  12 :
                        if (("plugin_strings" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  9 :
                        if (("plugin_action" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("plugin_strings" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("plugin_registration" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "jar");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  8 :
                        if (("plugin_action" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "isPluginBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  10 :
                        attIdx = context.getAttribute("", "language");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "key_stroke");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "base");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  12 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        if (("plugin_classpath" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("plugin_strings" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        state = 6;
                        continue outer;
                    case  1 :
                        if (("jar" == ___local)&&("" == ___uri)) {
                            _PluginClasspath.add(((freemind.controller.actions.generated.instance.impl.PluginClasspathTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginClasspathTypeImpl.class), 2, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  4 :
                        if (("isPluginBase" == ___local)&&("" == ___uri)) {
                            _PluginRegistration.add(((freemind.controller.actions.generated.instance.impl.PluginRegistrationTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginRegistrationTypeImpl.class), 5, ___uri, ___local, ___qname)));
                            return ;
                        }
                        if (("class_name" == ___local)&&("" == ___uri)) {
                            _PluginRegistration.add(((freemind.controller.actions.generated.instance.impl.PluginRegistrationTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginRegistrationTypeImpl.class), 5, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  10 :
                        if (("language" == ___local)&&("" == ___uri)) {
                            _PluginStrings.add(((freemind.controller.actions.generated.instance.impl.PluginStringsTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginStringsTypeImpl.class), 11, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  7 :
                        if (("key_stroke" == ___local)&&("" == ___uri)) {
                            _PluginAction.add(((freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        if (("base" == ___local)&&("" == ___uri)) {
                            _PluginAction.add(((freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  12 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  3 :
                        state = 6;
                        continue outer;
                    case  1 :
                        attIdx = context.getAttribute("", "jar");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  4 :
                        attIdx = context.getAttribute("", "isPluginBase");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  10 :
                        attIdx = context.getAttribute("", "language");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "key_stroke");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "base");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  12 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  3 :
                            state = 6;
                            continue outer;
                        case  1 :
                            attIdx = context.getAttribute("", "jar");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  0 :
                            state = 3;
                            continue outer;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  4 :
                            attIdx = context.getAttribute("", "isPluginBase");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "class_name");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  10 :
                            attIdx = context.getAttribute("", "language");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  7 :
                            attIdx = context.getAttribute("", "key_stroke");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "base");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  12 :
                            revertToParentFromText(value);
                            return ;
                        case  9 :
                            state = 12;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
