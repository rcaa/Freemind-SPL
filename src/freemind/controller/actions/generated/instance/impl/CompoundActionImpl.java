//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.02.23 at 11:11:43 GMT+01:00 
//

package freemind.controller.actions.generated.instance.impl;

import org.xml.sax.SAXException;

public class CompoundActionImpl
		extends
		freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl
		implements
		freemind.controller.actions.generated.instance.CompoundAction,
		com.sun.xml.bind.JAXBObject,
		com.sun.xml.bind.RIElement,
		freemind.controller.actions.generated.instance.impl.runtime.UnmarshallableObject,
		freemind.controller.actions.generated.instance.impl.runtime.XMLSerializable,
		freemind.controller.actions.generated.instance.impl.runtime.ValidatableObject {

	public final static java.lang.Class version = (freemind.controller.actions.generated.instance.impl.JAXBVersion.class);
	private static com.sun.msv.grammar.Grammar schemaFragment;

	public java.lang.String ____jaxb_ri____getNamespaceURI() {
		return "";
	}

	public java.lang.String ____jaxb_ri____getLocalName() {
		return "compound_action";
	}

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (freemind.controller.actions.generated.instance.CompoundAction.class);
	}

	public freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
		return new freemind.controller.actions.generated.instance.impl.CompoundActionImpl.Unmarshaller(
				context);
	}

	public void serializeElementBody(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		context.startElement("", "compound_action");
		super.serializeURIs(context);
		context.endNamespaceDecls();
		super.serializeAttributes(context);
		context.endAttributes();
		super.serializeElementBody(context);
		context.endElement();
	}

	public void serializeAttributes(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	public void serializeAttributeBody(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		context.startElement("", "compound_action");
		super.serializeURIs(context);
		context.endNamespaceDecls();
		super.serializeAttributes(context);
		context.endAttributes();
		super.serializeElementBody(context);
		context.endElement();
	}

	public void serializeURIs(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
	}

	public java.lang.Class getPrimaryInterface() {
		return (freemind.controller.actions.generated.instance.CompoundAction.class);
	}

	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
							+ "\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
							+ "grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
							+ "\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
							+ "msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilon"
							+ "Reducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xp\u0019y\u00c83p"
							+ "p\u0000sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.ms"
							+ "v.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004"
							+ "\u0019y\u00c8(ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom"
							+ ".sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0003xq\u0000~\u0000\u0004\u0019y\u00c8\u001dsr\u0000"
							+ "\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0007\u0019y\u00c8\u001aq\u0000~\u0000\u000epsq\u0000"
							+ "~\u0000\u0007\u0018\u00b9\u00f6\u00ecq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0017\u00fa%\u00beq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0017:T\u0090q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0016z\u0083bq\u0000~\u0000\u000e"
							+ "psq\u0000~\u0000\u0007\u0015\u00ba\u00b24q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0014\u00fa\u00e1\u0006q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0014;\u000f\u00d8q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0013{>\u00aaq"
							+ "\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0012\u00bbm|q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0011\u00fb\u009cNq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0011;\u00cb q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0010"
							+ "{\u00f9\u00f2q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u000f\u00bc(\u00c4q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u000e\u00fcW\u0096q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u000e<\u0086hq\u0000~\u0000\u000epsq\u0000"
							+ "~\u0000\u0007\r|\u00b5:q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\f\u00bc\u00e4\fq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u000b\u00fd\u0012\u00deq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u000b=A\u00b0q\u0000~\u0000\u000e"
							+ "psq\u0000~\u0000\u0007\n}p\u0082q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\t\u00bd\u009fTq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\b\u00fd\u00ce&q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\b=\u00fc\u00f8q"
							+ "\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0007~+\u00caq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0006\u00beZ\u009cq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0005\u00fe\u0089nq\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0005"
							+ ">\u00b8@q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0004~\u00e7\u0012q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0003\u00bf\u0015\u00e4q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0002\u00ffD\u00b6q\u0000~\u0000\u000epsq\u0000"
							+ "~\u0000\u0007\u0002?s\u0088q\u0000~\u0000\u000epsq\u0000~\u0000\u0007\u0001\u007f\u00a2Zq\u0000~\u0000\u000epsq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq"
							+ "\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
							+ "\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epsr\u00002com.sun.msv"
							+ ".grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004\u0000\u0000\u0000\b"
							+ "sq\u0000~\u0000\r\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dc"
							+ "om.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gra"
							+ "mmar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004\u0000\u0000\u0000\tq\u0000~\u00007q"
							+ "\u0000~\u0000<sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloc"
							+ "alNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000>xq\u0000~\u00009t\u0000=free"
							+ "mind.controller.actions.generated.instance.CompoundActiont\u0000+"
							+ "http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000"
							+ "sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<s"
							+ "q\u0000~\u0000=t\u0000?freemind.controller.actions.generated.instance.Selec"
							+ "tNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000e"
							+ "psq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000<freemind.controller"
							+ ".actions.generated.instance.CutNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000"
							+ "\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~"
							+ "\u0000<sq\u0000~\u0000=t\u0000>freemind.controller.actions.generated.instance.Pa"
							+ "steNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~"
							+ "\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000>freemind.controll"
							+ "er.actions.generated.instance.RevertXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,"
							+ "q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000"
							+ ":q\u0000~\u0000<sq\u0000~\u0000=t\u0000=freemind.controller.actions.generated.instanc"
							+ "e.BoldNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016"
							+ "q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000?freemind.contr"
							+ "oller.actions.generated.instance.ItalicNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000"
							+ "\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006"
							+ "q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Cfreemind.controller.actions.generated.ins"
							+ "tance.UnderlinedNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!pp"
							+ "sq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Afree"
							+ "mind.controller.actions.generated.instance.FontSizeNodeActio"
							+ "nq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1"
							+ "\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000=freemind.controller.actions.g"
							+ "enerated.instance.FontNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007"
							+ "\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t"
							+ "\u0000Dfreemind.controller.actions.generated.instance.NodeColorFo"
							+ "rmatActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000ep"
							+ "sq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Nfreemind.controller."
							+ "actions.generated.instance.NodeBackgroundColorFormatActionq\u0000"
							+ "~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000"
							+ "~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Dfreemind.controller.actions.gene"
							+ "rated.instance.NodeStyleFormatActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq"
							+ "\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000"
							+ "~\u0000=t\u0000Dfreemind.controller.actions.generated.instance.EdgeCol"
							+ "orFormatActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000"
							+ "~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Dfreemind.control"
							+ "ler.actions.generated.instance.EdgeWidthFormatActionq\u0000~\u0000Asq\u0000"
							+ "~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000"
							+ "~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Dfreemind.controller.actions.generated."
							+ "instance.EdgeStyleFormatActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf"
							+ "\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000?"
							+ "freemind.controller.actions.generated.instance.DeleteNodeAct"
							+ "ionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000"
							+ "\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000=freemind.controller.actions"
							+ ".generated.instance.EditNodeActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~"
							+ "\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000"
							+ "=t\u0000<freemind.controller.actions.generated.instance.NewNodeAc"
							+ "tionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003"
							+ "\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000<freemind.controller.action"
							+ "s.generated.instance.UndoXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~"
							+ "\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000"
							+ "=t\u00009freemind.controller.actions.generated.instance.FoldActio"
							+ "nq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1"
							+ "\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000>freemind.controller.actions.g"
							+ "enerated.instance.MoveNodesActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000"
							+ "\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000="
							+ "t\u0000=freemind.controller.actions.generated.instance.HookNodeAc"
							+ "tionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003"
							+ "\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000<freemind.controller.action"
							+ "s.generated.instance.AddIconActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~"
							+ "\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000"
							+ "=t\u0000Ffreemind.controller.actions.generated.instance.RemoveLas"
							+ "tIconXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000"
							+ "~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Ffreemind.control"
							+ "ler.actions.generated.instance.RemoveAllIconsXmlActionq\u0000~\u0000As"
							+ "q\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000ep"
							+ "q\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000@freemind.controller.actions.generate"
							+ "d.instance.MoveNodeXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!"
							+ "ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000@fr"
							+ "eemind.controller.actions.generated.instance.AddCloudXmlActi"
							+ "onq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf"
							+ "\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Dfreemind.controller.actions."
							+ "generated.instance.AddArrowLinkXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000e"
							+ "p\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000"
							+ "<sq\u0000~\u0000=t\u0000?freemind.controller.actions.generated.instance.Add"
							+ "LinkXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~"
							+ "\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Gfreemind.controll"
							+ "er.actions.generated.instance.RemoveArrowLinkXmlActionq\u0000~\u0000As"
							+ "q\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000ep"
							+ "q\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Ffreemind.controller.actions.generate"
							+ "d.instance.ArrowLinkColorXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~"
							+ "\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000"
							+ "=t\u0000Ffreemind.controller.actions.generated.instance.ArrowLink"
							+ "ArrowXmlActionq\u0000~\u0000Asq\u0000~\u0000\u0000\u0000\u00bf\u00d1,q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0007\u0000\u00bf\u00d1!ppsq\u0000~\u0000\n\u0000\u00bf\u00d1\u0016q\u0000"
							+ "~\u0000\u000epsq\u0000~\u00003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u000epq\u0000~\u00006q\u0000~\u0000:q\u0000~\u0000<sq\u0000~\u0000=t\u0000Ffreemind.control"
							+ "ler.actions.generated.instance.ArrowLinkPointXmlActionq\u0000~\u0000Aq"
							+ "\u0000~\u0000<sq\u0000~\u0000=t\u0000\u000fcompound_actiont\u0000\u0000sr\u0000\"com.sun.msv.grammar.Expre"
							+ "ssionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expre"
							+ "ssionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPoo"
							+ "l$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0001\f[\u0000\u0005"
							+ "tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000g\u0000\u0000\u0000rpur\u0000![Lco"
							+ "m.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0001\u007fq\u0000~\u0000\u001appppppppp"
							+ "pppppq\u0000~\u0000-pq\u0000~\u0000\u0016ppppppppppppppq\u0000~\u0000)pq\u0000~\u0000\u0012ppppppppppppppq\u0000~\u0000%"
							+ "ppppppppppppppppq\u0000~\u0000!pppppppppq\u0000~\u0000\u00b0q\u0000~\u0000\u00aaq\u0000~\u0000\u00a4q\u0000~\u0000\u009eq\u0000~\u0000\u0098q\u0000~\u0000\u0092"
							+ "q\u0000~\u0000\u008cq\u0000~\u0000\u0086q\u0000~\u0000\u0080q\u0000~\u0000zq\u0000~\u0000tq\u0000~\u0000\u00a9q\u0000~\u0000\u00a3q\u0000~\u0000\u009dq\u0000~\u0000\u0097q\u0000~\u0000\u0091q\u0000~\u0000\u008bq\u0000~\u0000\u0085"
							+ "q\u0000~\u0000\u007fq\u0000~\u0000yq\u0000~\u0000sq\u0000~\u0000mq\u0000~\u0000gq\u0000~\u0000aq\u0000~\u0000[q\u0000~\u0000Uq\u0000~\u0000Oq\u0000~\u0000Iq\u0000~\u0000Cq\u0000~\u00001"
							+ "q\u0000~\u0000nq\u0000~\u0000hq\u0000~\u0000bq\u0000~\u0000\\q\u0000~\u0000Vq\u0000~\u0000Pq\u0000~\u0000Jq\u0000~\u0000Dq\u0000~\u00002q\u0000~\u0000,q\u0000~\u0000\u00afq\u0000~\u0000\u001d"
							+ "q\u0000~\u0000\u00b6q\u0000~\u0000\u00b5q\u0000~\u0000\u00bcq\u0000~\u0000\u00bbq\u0000~\u0000\u00c2q\u0000~\u0000\u00c1q\u0000~\u0000\u00c8q\u0000~\u0000\u00c7q\u0000~\u0000\u0019q\u0000~\u0000\u00ceq\u0000~\u0000\u00cdq\u0000~\u0000\u00d4"
							+ "q\u0000~\u0000\u00d3q\u0000~\u0000\u00daq\u0000~\u0000(q\u0000~\u0000\u00d9q\u0000~\u0000\u00e0q\u0000~\u0000\u00dfq\u0000~\u0000\u0015q\u0000~\u0000\u00e6q\u0000~\u0000\u00e5q\u0000~\u0000\u00ecq\u0000~\u0000\u00ebq\u0000~\u0000\u00f2"
							+ "q\u0000~\u0000\u00f1q\u0000~\u0000\u00f8q\u0000~\u0000\u00f7q\u0000~\u0000\u0011q\u0000~\u0000\u00feq\u0000~\u0000\u00fdq\u0000~\u0001\u0004q\u0000~\u0000$q\u0000~\u0001\u0003ppppppppppppppp"
							+ "q\u0000~\u0000 ppppppppppppppppq\u0000~\u0000\u001cppppppppppppppq\u0000~\u0000/pq\u0000~\u0000\u0018ppppppppp"
							+ "pppppq\u0000~\u0000+pq\u0000~\u0000\u0014ppppppppppppppq\u0000~\u0000\'pq\u0000~\u0000\u0010ppppppppppppppq\u0000~\u0000#"
							+ "ppppppppppppppppq\u0000~\u0000\u001fppppppppppppppppq\u0000~\u0000\u001bppppppppppppppq\u0000~\u0000"
							+ ".pq\u0000~\u0000\u0017ppppppppppppppq\u0000~\u0000*pq\u0000~\u0000\u0013ppppppppppppppq\u0000~\u0000&pq\u0000~\u0000\u000fppq"
							+ "\u0000~\u0000\fppppppppppq\u0000~\u0000\tq\u0000~\u0000\"ppppppppppppppppq\u0000~\u0000\u001eppppppppppppppp"
							+ "p"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	public class Unmarshaller
			extends
			freemind.controller.actions.generated.instance.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
			super(context, "----");
		}

		protected Unmarshaller(
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		public java.lang.Object owner() {
			return freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this;
		}

		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 1:
					if (("compound_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("select_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("cut_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("paste_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("revert_xml_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("bold_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("italic_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("underlined_node_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("font_size_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("font_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("node_color_format_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("node_background_color_format_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("node_style_format_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("edge_color_format_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("edge_width_format_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("edge_style_format_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("delete_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("edit_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("new_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("undo_xml_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("fold_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("move_nodes_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("hook_node_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("add_icon_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("remove_last_icon_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("remove_all_icons_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("move_node_xml_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}

					// CLOUDS
					compoundActionHook(___uri, ___local, ___qname, __atts);

					if (("add_arrow_link_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("add_link_xml_action" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("remove_arrow_link_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("arrow_link_color_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("arrow_link_arrow_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					if (("arrow_link_point_xml_action" == ___local)
							&& ("" == ___uri)) {
						spawnHandlerFromEnterElement(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, ___uri, ___local,
								___qname, __atts);
						return;
					}
					spawnHandlerFromEnterElement(
							(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
									context)), 2, ___uri, ___local, ___qname,
							__atts);
					return;
				case 0:
					if (("compound_action" == ___local) && ("" == ___uri)) {
						context.pushAttributes(__atts, false);
						state = 1;
						return;
					}
					break;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		// CLOUDS
		private void compoundActionHook(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws SAXException {
			// if (("add_cloud_xml_action" == ___local) && ("" == ___uri)) {
			// spawnHandlerFromEnterElement(
			// (((freemind.controller.actions.generated.instance.impl.
			// CompoundActionTypeImpl)
			// freemind.controller.actions.generated.instance
			// .impl.CompoundActionImpl.this).new Unmarshaller(
			// context)), 2, ___uri, ___local, ___qname,
			// __atts);
			// return;
			// }
		}

		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 2:
					if (("compound_action" == ___local) && ("" == ___uri)) {
						context.popAttributes();
						state = 3;
						return;
					}
					break;
				case 1:
					spawnHandlerFromLeaveElement(
							(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
									context)), 2, ___uri, ___local, ___qname);
					return;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 1:
					spawnHandlerFromEnterAttribute(
							(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
									context)), 2, ___uri, ___local, ___qname);
					return;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 3:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 1:
					spawnHandlerFromLeaveAttribute(
							(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
									context)), 2, ___uri, ___local, ___qname);
					return;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 3:
						revertToParentFromText(value);
						return;
					case 1:
						spawnHandlerFromText(
								(((freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl) freemind.controller.actions.generated.instance.impl.CompoundActionImpl.this).new Unmarshaller(
										context)), 2, value);
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

	}

}
