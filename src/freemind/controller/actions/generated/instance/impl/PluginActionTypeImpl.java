//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.02.23 at 11:11:43 GMT+01:00 
//


package freemind.controller.actions.generated.instance.impl;

public class PluginActionTypeImpl implements freemind.controller.actions.generated.instance.PluginActionType, com.sun.xml.bind.JAXBObject, freemind.controller.actions.generated.instance.impl.runtime.UnmarshallableObject, freemind.controller.actions.generated.instance.impl.runtime.XMLSerializable, freemind.controller.actions.generated.instance.impl.runtime.ValidatableObject
{

    protected java.lang.String _Name;
    protected java.lang.String _Documentation;
    protected java.lang.String _Base;
    protected com.sun.xml.bind.util.ListImpl _PluginProperty = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _PluginMenu = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _PluginMode = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected java.lang.String _Label;
    protected java.lang.String _ClassName;
    protected java.lang.String _IconPath;
    protected java.lang.String _KeyStroke;
    protected java.lang.String _Instanciation;
    public final static java.lang.Class version = (freemind.controller.actions.generated.instance.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (freemind.controller.actions.generated.instance.PluginActionType.class);
    }

    public java.lang.String getName() {
        return _Name;
    }

    public void setName(java.lang.String value) {
        _Name = value;
    }

    public java.lang.String getDocumentation() {
        return _Documentation;
    }

    public void setDocumentation(java.lang.String value) {
        _Documentation = value;
    }

    public java.lang.String getBase() {
        return _Base;
    }

    public void setBase(java.lang.String value) {
        _Base = value;
    }

    public java.util.List getPluginProperty() {
        return _PluginProperty;
    }

    public java.util.List getPluginMenu() {
        return _PluginMenu;
    }

    public java.util.List getPluginMode() {
        return _PluginMode;
    }

    public java.lang.String getLabel() {
        return _Label;
    }

    public void setLabel(java.lang.String value) {
        _Label = value;
    }

    public java.lang.String getClassName() {
        return _ClassName;
    }

    public void setClassName(java.lang.String value) {
        _ClassName = value;
    }

    public java.lang.String getIconPath() {
        return _IconPath;
    }

    public void setIconPath(java.lang.String value) {
        _IconPath = value;
    }

    public java.lang.String getKeyStroke() {
        return _KeyStroke;
    }

    public void setKeyStroke(java.lang.String value) {
        _KeyStroke = value;
    }

    public java.lang.String getInstanciation() {
        if (_Instanciation == null) {
            return "Once";
        } else {
            return _Instanciation;
        }
    }

    public void setInstanciation(java.lang.String value) {
        _Instanciation = value;
    }

    public freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler createUnmarshaller(freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
        return new freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl.Unmarshaller(context);
    }

    public void serializeElementBody(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = _PluginProperty.size();
        int idx5 = 0;
        final int len5 = _PluginMenu.size();
        int idx6 = 0;
        final int len6 = _PluginMode.size();
        while (idx6 != len6) {
            if (_PluginMode.get(idx6) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx6 ++)));
            } else {
                context.startElement("", "plugin_mode");
                int idx_0 = idx6;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx_0 ++)));
                context.endNamespaceDecls();
                int idx_1 = idx6;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx_1 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx6 ++)));
                context.endElement();
            }
        }
        while (idx5 != len5) {
            if (_PluginMenu.get(idx5) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx5 ++)));
            } else {
                context.startElement("", "plugin_menu");
                int idx_2 = idx5;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx_2 ++)));
                context.endNamespaceDecls();
                int idx_3 = idx5;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx_3 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx5 ++)));
                context.endElement();
            }
        }
        while (idx4 != len4) {
            if (_PluginProperty.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx4 ++)));
            } else {
                context.startElement("", "plugin_property");
                int idx_4 = idx4;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx_4 ++)));
                context.endNamespaceDecls();
                int idx_5 = idx4;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx_5 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx4 ++)));
                context.endElement();
            }
        }
    }

    public void serializeAttributes(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = _PluginProperty.size();
        int idx5 = 0;
        final int len5 = _PluginMenu.size();
        int idx6 = 0;
        final int len6 = _PluginMode.size();
        if (_KeyStroke!= null) {
            context.startAttribute("", "key_stroke");
            try {
                context.text(((java.lang.String) _KeyStroke));
            } catch (java.lang.Exception e) {
                freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "base");
        try {
            context.text(((java.lang.String) _Base));
        } catch (java.lang.Exception e) {
            freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Name!= null) {
            context.startAttribute("", "name");
            try {
                context.text(((java.lang.String) _Name));
            } catch (java.lang.Exception e) {
                freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Documentation!= null) {
            context.startAttribute("", "documentation");
            try {
                context.text(((java.lang.String) _Documentation));
            } catch (java.lang.Exception e) {
                freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_IconPath!= null) {
            context.startAttribute("", "icon_path");
            try {
                context.text(((java.lang.String) _IconPath));
            } catch (java.lang.Exception e) {
                freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "class_name");
        try {
            context.text(((java.lang.String) _ClassName));
        } catch (java.lang.Exception e) {
            freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "label");
        try {
            context.text(((java.lang.String) _Label));
        } catch (java.lang.Exception e) {
            freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Instanciation!= null) {
            context.startAttribute("", "instanciation");
            try {
                context.text(((java.lang.String) _Instanciation));
            } catch (java.lang.Exception e) {
                freemind.controller.actions.generated.instance.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
    }

    public void serializeAttributeBody(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = _PluginProperty.size();
        int idx5 = 0;
        final int len5 = _PluginMenu.size();
        int idx6 = 0;
        final int len6 = _PluginMode.size();
        while (idx6 != len6) {
            if (_PluginMode.get(idx6) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx6 ++)));
            } else {
                context.startElement("", "plugin_mode");
                int idx_0 = idx6;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx_0 ++)));
                context.endNamespaceDecls();
                int idx_1 = idx6;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx_1 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginMode.get(idx6 ++)));
                context.endElement();
            }
        }
        while (idx5 != len5) {
            if (_PluginMenu.get(idx5) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx5 ++)));
            } else {
                context.startElement("", "plugin_menu");
                int idx_2 = idx5;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx_2 ++)));
                context.endNamespaceDecls();
                int idx_3 = idx5;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx_3 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginMenu.get(idx5 ++)));
                context.endElement();
            }
        }
        while (idx4 != len4) {
            if (_PluginProperty.get(idx4) instanceof javax.xml.bind.Element) {
                context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx4 ++)));
            } else {
                context.startElement("", "plugin_property");
                int idx_4 = idx4;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx_4 ++)));
                context.endNamespaceDecls();
                int idx_5 = idx4;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx_5 ++)));
                context.endAttributes();
                context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _PluginProperty.get(idx4 ++)));
                context.endElement();
            }
        }
    }

    public void serializeURIs(freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = _PluginProperty.size();
        int idx5 = 0;
        final int len5 = _PluginMenu.size();
        int idx6 = 0;
        final int len6 = _PluginMode.size();
    }

    public java.lang.Class getPrimaryInterface() {
        return (freemind.controller.actions.generated.instance.PluginActionType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0017Yi\u0091ppsq\u0000~\u0000\u0000\u0014~I\u0005ppsq\u0000~\u0000\u0000\u0012"
+"\u00b1\u00aa\u00f0ppsq\u0000~\u0000\u0000\u000fcO\u00fbppsq\u0000~\u0000\u0000\r%\u00a4\u00abppsq\u0000~\u0000\u0000\n\u008b\u00f5\u00c6ppsq\u0000~\u0000\u0000\b\u0097i\u00fdppsq\u0000~\u0000\u0000\u0006"
+":$\u00fcppsq\u0000~\u0000\u0000\u0004~\u00e7cppsq\u0000~\u0000\u0000\u0002\u00ffD\u00ebppsr\u0000\u001dcom.sun.msv.grammar.ChoiceE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0001\u007f\u00a2sppsr\u0000 com.sun.msv.grammar.OneOrMoreEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003ex"
+"pq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0001\u007f\u00a2hsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p"
+"sq\u0000~\u0000\u000f\u0001\u007f\u00a2eq\u0000~\u0000\u0015psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001e"
+"com.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclared"
+"AttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00bf\u00d17q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u0017\u0000\u00bf\u00d1,pp\u0000"
+"sq\u0000~\u0000\u000f\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0011\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u0015psr\u0000 com.sun.msv.grammar.Attribut"
+"eExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0018xq\u0000~\u0000\u0003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u0015ps"
+"r\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0014\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000c"
+"om.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
+"\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\"q\u0000~\u0000\'sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000"
+")xq\u0000~\u0000$t\u0000=freemind.controller.actions.generated.instance.Plu"
+"ginModeTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000"
+"~\u0000(t\u0000\u000bplugin_modet\u0000\u0000sq\u0000~\u0000\u0017\u0000\u00bf\u00d1,q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u000f\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0011\u0000\u00bf\u00d1\u0016q"
+"\u0000~\u0000\u0015psq\u0000~\u0000\u001e\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u0015pq\u0000~\u0000!q\u0000~\u0000%q\u0000~\u0000\'sq\u0000~\u0000(t\u00009freemind.contro"
+"ller.actions.generated.instance.PluginModeq\u0000~\u0000,q\u0000~\u0000\'sq\u0000~\u0000\u000f\u0001\u007f"
+"\u00a2sppsq\u0000~\u0000\u0011\u0001\u007f\u00a2hq\u0000~\u0000\u0015psq\u0000~\u0000\u000f\u0001\u007f\u00a2eq\u0000~\u0000\u0015psq\u0000~\u0000\u0017\u0000\u00bf\u00d17q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u0017\u0000"
+"\u00bf\u00d1,pp\u0000sq\u0000~\u0000\u000f\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0011\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u0015psq\u0000~\u0000\u001e\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u0015pq\u0000~\u0000!q\u0000~\u0000%"
+"q\u0000~\u0000\'sq\u0000~\u0000(t\u0000=freemind.controller.actions.generated.instance"
+".PluginMenuTypeq\u0000~\u0000,sq\u0000~\u0000(t\u0000\u000bplugin_menuq\u0000~\u0000/sq\u0000~\u0000\u0017\u0000\u00bf\u00d1,q\u0000~\u0000\u0015"
+"p\u0000sq\u0000~\u0000\u000f\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0011\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u0015psq\u0000~\u0000\u001e\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u0015pq\u0000~\u0000!q\u0000~\u0000%q\u0000~\u0000"
+"\'sq\u0000~\u0000(t\u00009freemind.controller.actions.generated.instance.Plu"
+"ginMenuq\u0000~\u0000,q\u0000~\u0000\'sq\u0000~\u0000\u000f\u0001\u007f\u00a2sppsq\u0000~\u0000\u0011\u0001\u007f\u00a2hq\u0000~\u0000\u0015psq\u0000~\u0000\u000f\u0001\u007f\u00a2eq\u0000~\u0000\u0015"
+"psq\u0000~\u0000\u0017\u0000\u00bf\u00d17q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u0017\u0000\u00bf\u00d1,pp\u0000sq\u0000~\u0000\u000f\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0011\u0000\u00bf\u00d1\u0016q\u0000~\u0000\u0015ps"
+"q\u0000~\u0000\u001e\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u0015pq\u0000~\u0000!q\u0000~\u0000%q\u0000~\u0000\'sq\u0000~\u0000(t\u0000Afreemind.controller.a"
+"ctions.generated.instance.PluginPropertyTypeq\u0000~\u0000,sq\u0000~\u0000(t\u0000\u000fpl"
+"ugin_propertyq\u0000~\u0000/sq\u0000~\u0000\u0017\u0000\u00bf\u00d1,q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u000f\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0011\u0000\u00bf\u00d1\u0016q\u0000~"
+"\u0000\u0015psq\u0000~\u0000\u001e\u0000\u00bf\u00d1\u0013q\u0000~\u0000\u0015pq\u0000~\u0000!q\u0000~\u0000%q\u0000~\u0000\'sq\u0000~\u0000(t\u0000=freemind.controll"
+"er.actions.generated.instance.PluginPropertyq\u0000~\u0000,q\u0000~\u0000\'sq\u0000~\u0000\u000f"
+"\u0001\u00bb=\u0094ppsq\u0000~\u0000\u001e\u0001\u00bb=\u0089q\u0000~\u0000\u0015psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004"
+"namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0001\u0086\u00d4\u0094ppsr\u0000#com.sun."
+"msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*co"
+"m.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.s"
+"un.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.d"
+"atatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000)L\u0000\b"
+"typeNameq\u0000~\u0000)L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/White"
+"SpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006strin"
+"gsr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpress"
+"ion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001e"
+"jB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000)L\u0000\fnamespaceURIq\u0000~\u0000)xpq\u0000~\u0000gq\u0000~\u0000fsq\u0000"
+"~\u0000(t\u0000\nkey_strokeq\u0000~\u0000/q\u0000~\u0000\'sq\u0000~\u0000\u001e\u0002]D\u00fcppq\u0000~\u0000_sq\u0000~\u0000(t\u0000\u0004baseq\u0000~\u0000"
+"/sq\u0000~\u0000\u000f\u0001\u00f4\u008b\u00c4ppsq\u0000~\u0000\u001e\u0001\u00f4\u008b\u00b9q\u0000~\u0000\u0015pq\u0000~\u0000_sq\u0000~\u0000(t\u0000\u0004nameq\u0000~\u0000/q\u0000~\u0000\'sq\u0000"
+"~\u0000\u000f\u0002\u0099\u00ae\u00e0ppsq\u0000~\u0000\u001e\u0002\u0099\u00ae\u00d5q\u0000~\u0000\u0015pq\u0000~\u0000_sq\u0000~\u0000(t\u0000\rdocumentationq\u0000~\u0000/q\u0000~"
+"\u0000\'sq\u0000~\u0000\u000f\u0002=\u00abKppsq\u0000~\u0000\u001e\u0002=\u00ab@q\u0000~\u0000\u0015pq\u0000~\u0000_sq\u0000~\u0000(t\u0000\ticon_pathq\u0000~\u0000/q\u0000"
+"~\u0000\'sq\u0000~\u0000\u001e\u0003NZ\u00f0ppq\u0000~\u0000_sq\u0000~\u0000(t\u0000\nclass_nameq\u0000~\u0000/sq\u0000~\u0000\u001e\u0001\u00cc\u009e\u0010ppq\u0000~\u0000"
+"_sq\u0000~\u0000(t\u0000\u0005labelq\u0000~\u0000/sq\u0000~\u0000\u000f\u0002\u00db \u0087ppsq\u0000~\u0000\u001e\u0002\u00db |q\u0000~\u0000\u0015psq\u0000~\u0000\\\u0001,TApp"
+"sr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006v"
+"aluest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataType"
+"WithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype."
+"xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueC"
+"heckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeIm"
+"pl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;"
+"L\u0000\tfacetNameq\u0000~\u0000)xq\u0000~\u0000cq\u0000~\u0000/psr\u00005com.sun.msv.datatype.xsd.Wh"
+"iteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000i\u0000\u0000sr\u0000\"com.sun.msv"
+".datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000`q\u0000~\u0000ft\u0000\u0005tokenq\u0000~\u0000\u0091\u0001q"
+"\u0000~\u0000\u0093t\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@"
+"\u0000\u0000\u0000\u0000\u0000\u0005t\u0000\u000bOnceForRoott\u0000\u0004Oncet\u0000\u000bApplyToRoott\u0000\u0005Othert\u0000\u000fOnceForA"
+"llNodesxq\u0000~\u0000lsq\u0000~\u0000mt\u0000\rtoken-derivedq\u0000~\u0000/sq\u0000~\u0000(t\u0000\rinstanciati"
+"onq\u0000~\u0000/q\u0000~\u0000\'sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHas"
+"h;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed"
+"\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u00a2[\u0000\u0005tablet\u0000![Lcom/sun/m"
+"sv/grammar/Expression;xp\u0000\u0000\u0000$\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.E"
+"xpression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppppppppppppppppppppppppppp"
+"ppppppppppppq\u0000~\u0000\u0005q\u0000~\u0000\u001dq\u0000~\u00002q\u0000~\u0000<q\u0000~\u0000Dq\u0000~\u0000Nq\u0000~\u0000Vpppppq\u0000~\u0000\u001cq\u0000~"
+"\u00001q\u0000~\u0000;q\u0000~\u0000Cq\u0000~\u0000Mq\u0000~\u0000Uq\u0000~\u0000\u0007pppppppppppppppppq\u0000~\u0000\npppppppq\u0000~\u0000"
+"xpppppppppq\u0000~\u0000\fpq\u0000~\u0000\bpq\u0000~\u0000tppppppppq\u0000~\u0000|q\u0000~\u0000\u0006pppq\u0000~\u0000\rpq\u0000~\u0000\u0086p"
+"pppppppppppppppppppq\u0000~\u0000\u000eppppppppq\u0000~\u0000\u0016q\u0000~\u00008q\u0000~\u0000Jq\u0000~\u0000\u0013q\u0000~\u00007q\u0000~"
+"\u0000Ippppppppq\u0000~\u0000\u0010q\u0000~\u00006q\u0000~\u0000Hq\u0000~\u0000\u000bpq\u0000~\u0000Zppppppq\u0000~\u0000\tppppppppppppp"
+"pp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends freemind.controller.actions.generated.instance.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
            super(context, "----------------------------------");
        }

        protected Unmarshaller(freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  25 :
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "instanciation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "base");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                    case  27 :
                        if (("plugin_mode" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        if (("plugin_menu" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  28 :
                        attIdx = context.getAttribute("", "location");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  30 :
                        if (("plugin_menu" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 28;
                            return ;
                        }
                        if (("plugin_property" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 31;
                            return ;
                        }
                        state = 33;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "icon_path");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "value");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 18;
                            continue outer;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "documentation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  24 :
                        if (("plugin_mode" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "label");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 21;
                            continue outer;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "key_stroke");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  33 :
                        if (("plugin_property" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 31;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText0(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Instanciation = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Base = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Name = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IconPath = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ClassName = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Documentation = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Label = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _KeyStroke = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  25 :
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "instanciation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  29 :
                        if (("plugin_menu" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 30;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "base");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                    case  32 :
                        if (("plugin_property" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 33;
                            return ;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  28 :
                        attIdx = context.getAttribute("", "location");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  26 :
                        if (("plugin_mode" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "icon_path");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "value");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 18;
                            continue outer;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "documentation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "label");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 21;
                            continue outer;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "key_stroke");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  33 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  25 :
                        if (("class_name" == ___local)&&("" == ___uri)) {
                            _PluginMode.add(((freemind.controller.actions.generated.instance.impl.PluginModeTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginModeTypeImpl.class), 26, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  21 :
                        if (("instanciation" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        if (("base" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  6 :
                        if (("name" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  28 :
                        if (("location" == ___local)&&("" == ___uri)) {
                            _PluginMenu.add(((freemind.controller.actions.generated.instance.impl.PluginMenuTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginMenuTypeImpl.class), 29, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  12 :
                        if (("icon_path" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  31 :
                        if (("value" == ___local)&&("" == ___uri)) {
                            _PluginProperty.add(((freemind.controller.actions.generated.instance.impl.PluginPropertyTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginPropertyTypeImpl.class), 32, ___uri, ___local, ___qname)));
                            return ;
                        }
                        if (("name" == ___local)&&("" == ___uri)) {
                            _PluginProperty.add(((freemind.controller.actions.generated.instance.impl.PluginPropertyTypeImpl) spawnChildFromEnterAttribute((freemind.controller.actions.generated.instance.impl.PluginPropertyTypeImpl.class), 32, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  15 :
                        if (("class_name" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        break;
                    case  9 :
                        if (("documentation" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  18 :
                        if (("label" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("key_stroke" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  33 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  25 :
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  17 :
                        if (("class_name" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "instanciation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText0(v);
                            state = 24;
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  8 :
                        if (("name" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "base");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 9;
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  14 :
                        if (("icon_path" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  28 :
                        attIdx = context.getAttribute("", "location");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "icon_path");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 15;
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "value");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "class_name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 18;
                            continue outer;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "documentation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText5(v);
                            state = 12;
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  20 :
                        if (("label" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  2 :
                        if (("key_stroke" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  18 :
                        attIdx = context.getAttribute("", "label");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText6(v);
                            state = 21;
                            continue outer;
                        }
                        break;
                    case  23 :
                        if (("instanciation" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("documentation" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "key_stroke");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText7(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  5 :
                        if (("base" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  33 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  25 :
                            attIdx = context.getAttribute("", "class_name");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  21 :
                            attIdx = context.getAttribute("", "instanciation");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText0(v);
                                state = 24;
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  22 :
                            eatText0(value);
                            state = 23;
                            return ;
                        case  19 :
                            eatText6(value);
                            state = 20;
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "base");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 6;
                                continue outer;
                            }
                            break;
                        case  7 :
                            eatText2(value);
                            state = 8;
                            return ;
                        case  13 :
                            eatText3(value);
                            state = 14;
                            return ;
                        case  10 :
                            eatText5(value);
                            state = 11;
                            return ;
                        case  27 :
                            state = 30;
                            continue outer;
                        case  6 :
                            attIdx = context.getAttribute("", "name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 9;
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  28 :
                            attIdx = context.getAttribute("", "location");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  16 :
                            eatText4(value);
                            state = 17;
                            return ;
                        case  30 :
                            state = 33;
                            continue outer;
                        case  12 :
                            attIdx = context.getAttribute("", "icon_path");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 15;
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  31 :
                            attIdx = context.getAttribute("", "value");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "name");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  15 :
                            attIdx = context.getAttribute("", "class_name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 18;
                                continue outer;
                            }
                            break;
                        case  1 :
                            eatText7(value);
                            state = 2;
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "documentation");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText5(v);
                                state = 12;
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  4 :
                            eatText1(value);
                            state = 5;
                            return ;
                        case  24 :
                            state = 27;
                            continue outer;
                        case  18 :
                            attIdx = context.getAttribute("", "label");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText6(v);
                                state = 21;
                                continue outer;
                            }
                            break;
                        case  0 :
                            attIdx = context.getAttribute("", "key_stroke");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText7(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  33 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
