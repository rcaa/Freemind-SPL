//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.02.23 at 11:11:43 GMT+01:00 
//

package freemind.controller.actions.generated.instance.impl;

public class CompoundActionTypeImpl extends
		freemind.controller.actions.generated.instance.impl.XmlActionImpl
		implements
		freemind.controller.actions.generated.instance.CompoundActionType,
		com.sun.xml.bind.JAXBObject,
		freemind.controller.actions.generated.instance.impl.runtime.UnmarshallableObject,
		freemind.controller.actions.generated.instance.impl.runtime.XMLSerializable,
		freemind.controller.actions.generated.instance.impl.runtime.ValidatableObject {

	protected com.sun.xml.bind.util.ListImpl _CompoundActionOrSelectNodeActionOrCutNodeAction = new com.sun.xml.bind.util.ListImpl(
			new java.util.ArrayList());
	public final static java.lang.Class version = (freemind.controller.actions.generated.instance.impl.JAXBVersion.class);
	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (freemind.controller.actions.generated.instance.CompoundActionType.class);
	}

	public java.util.List getCompoundActionOrSelectNodeActionOrCutNodeAction() {
		return _CompoundActionOrSelectNodeActionOrCutNodeAction;
	}

	public freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
		return new freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.Unmarshaller(
				context);
	}

	public void serializeElementBody(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx1 = 0;
		final int len1 = _CompoundActionOrSelectNodeActionOrCutNodeAction
				.size();
		super.serializeElementBody(context);
		while (idx1 != len1) {
			context.childAsElementBody(((com.sun.xml.bind.JAXBObject) _CompoundActionOrSelectNodeActionOrCutNodeAction
					.get(idx1++)));
		}
	}

	public void serializeAttributes(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx1 = 0;
		final int len1 = _CompoundActionOrSelectNodeActionOrCutNodeAction
				.size();
		super.serializeAttributes(context);
		while (idx1 != len1) {
			context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _CompoundActionOrSelectNodeActionOrCutNodeAction
					.get(idx1++)));
		}
	}

	public void serializeAttributeBody(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx1 = 0;
		final int len1 = _CompoundActionOrSelectNodeActionOrCutNodeAction
				.size();
		super.serializeAttributeBody(context);
		while (idx1 != len1) {
			context.childAsAttributeBody(((com.sun.xml.bind.JAXBObject) _CompoundActionOrSelectNodeActionOrCutNodeAction
					.get(idx1++)));
		}
	}

	public void serializeURIs(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		int idx1 = 0;
		final int len1 = _CompoundActionOrSelectNodeActionOrCutNodeAction
				.size();
		super.serializeURIs(context);
		while (idx1 != len1) {
			context.childAsURIs(((com.sun.xml.bind.JAXBObject) _CompoundActionOrSelectNodeActionOrCutNodeAction
					.get(idx1++)));
		}
	}

	public java.lang.Class getPrimaryInterface() {
		return (freemind.controller.actions.generated.instance.CompoundActionType.class);
	}

	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun."
							+ "msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gramm"
							+ "ar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression"
							+ "\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/l"
							+ "ang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0019y\u00c8(ppsr\u0000 com.sun.msv.gramm"
							+ "ar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0019y\u00c8\u001dsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002"
							+ "\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u0000\u0019y\u00c8\u001aq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0018\u00b9\u00f6\u00ecq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0017\u00fa%\u00beq\u0000~\u0000"
							+ "\npsq\u0000~\u0000\u0000\u0017:T\u0090q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0016z\u0083bq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0015\u00ba\u00b24q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0014\u00fa\u00e1\u0006"
							+ "q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0014;\u000f\u00d8q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0013{>\u00aaq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0012\u00bbm|q\u0000~\u0000\npsq\u0000~\u0000\u0000"
							+ "\u0011\u00fb\u009cNq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0011;\u00cb q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0010{\u00f9\u00f2q\u0000~\u0000\npsq\u0000~\u0000\u0000\u000f\u00bc(\u00c4q\u0000~\u0000\npsq"
							+ "\u0000~\u0000\u0000\u000e\u00fcW\u0096q\u0000~\u0000\npsq\u0000~\u0000\u0000\u000e<\u0086hq\u0000~\u0000\npsq\u0000~\u0000\u0000\r|\u00b5:q\u0000~\u0000\npsq\u0000~\u0000\u0000\f\u00bc\u00e4\fq\u0000~\u0000"
							+ "\npsq\u0000~\u0000\u0000\u000b\u00fd\u0012\u00deq\u0000~\u0000\npsq\u0000~\u0000\u0000\u000b=A\u00b0q\u0000~\u0000\npsq\u0000~\u0000\u0000\n}p\u0082q\u0000~\u0000\npsq\u0000~\u0000\u0000\t\u00bd\u009fT"
							+ "q\u0000~\u0000\npsq\u0000~\u0000\u0000\b\u00fd\u00ce&q\u0000~\u0000\npsq\u0000~\u0000\u0000\b=\u00fc\u00f8q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0007~+\u00caq\u0000~\u0000\npsq\u0000~\u0000\u0000"
							+ "\u0006\u00beZ\u009cq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0005\u00fe\u0089nq\u0000~\u0000\npsq\u0000~\u0000\u0000\u0005>\u00b8@q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0004~\u00e7\u0012q\u0000~\u0000\npsq"
							+ "\u0000~\u0000\u0000\u0003\u00bf\u0015\u00e4q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0002\u00ffD\u00b6q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0002?s\u0088q\u0000~\u0000\npsq\u0000~\u0000\u0000\u0001\u007f\u00a2Zq\u0000~\u0000"
							+ "\npsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tn"
							+ "ameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gr"
							+ "ammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fc"
							+ "ontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\n"
							+ "psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L"
							+ "\u0000\tnameClassq\u0000~\u0000-xq\u0000~\u0000\u0003\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npsr\u00002com.sun.msv.grammar.Expr"
							+ "ession$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\t\u0001psr\u0000 c"
							+ "om.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.gr"
							+ "ammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expressi"
							+ "on$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u00006q\u0000~\u0000;sr\u0000#com.s"
							+ "un.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljav"
							+ "a/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000=xq\u0000~\u00008t\u0000=freemind.controll"
							+ "er.actions.generated.instance.CompoundActiont\u0000+http://java.s"
							+ "un.com/jaxb/xjc/dummy-elementssq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!pps"
							+ "q\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000?freem"
							+ "ind.controller.actions.generated.instance.SelectNodeActionq\u0000"
							+ "~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000"
							+ "~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000<freemind.controller.actions.gene"
							+ "rated.instance.CutNodeActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!"
							+ "ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000>fr"
							+ "eemind.controller.actions.generated.instance.PasteNodeAction"
							+ "q\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013"
							+ "q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000>freemind.controller.actions.ge"
							+ "nerated.instance.RevertXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000"
							+ "\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t"
							+ "\u0000=freemind.controller.actions.generated.instance.BoldNodeAct"
							+ "ionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000"
							+ "\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000?freemind.controller.actions"
							+ ".generated.instance.ItalicNodeActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq"
							+ "\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000"
							+ "~\u0000<t\u0000Cfreemind.controller.actions.generated.instance.Underli"
							+ "nedNodeActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~"
							+ "\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Afreemind.controll"
							+ "er.actions.generated.instance.FontSizeNodeActionq\u0000~\u0000@sq\u0000~\u0000,\u0000"
							+ "\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q"
							+ "\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000=freemind.controller.actions.generated.inst"
							+ "ance.FontNodeActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000"
							+ "\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Dfreemind.co"
							+ "ntroller.actions.generated.instance.NodeColorFormatActionq\u0000~"
							+ "\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~"
							+ "\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Nfreemind.controller.actions.gener"
							+ "ated.instance.NodeBackgroundColorFormatActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,"
							+ "q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u0000"
							+ "9q\u0000~\u0000;sq\u0000~\u0000<t\u0000Dfreemind.controller.actions.generated.instanc"
							+ "e.NodeStyleFormatActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000"
							+ "~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Dfreemin"
							+ "d.controller.actions.generated.instance.EdgeColorFormatActio"
							+ "nq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1"
							+ "\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Dfreemind.controller.actions.g"
							+ "enerated.instance.EdgeWidthFormatActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np"
							+ "\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;"
							+ "sq\u0000~\u0000<t\u0000Dfreemind.controller.actions.generated.instance.Edge"
							+ "StyleFormatActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1"
							+ "\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000?freemind.cont"
							+ "roller.actions.generated.instance.DeleteNodeActionq\u0000~\u0000@sq\u0000~\u0000"
							+ ",\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u0000"
							+ "5q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000=freemind.controller.actions.generated.in"
							+ "stance.EditNodeActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000"
							+ "\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000<freemind."
							+ "controller.actions.generated.instance.NewNodeActionq\u0000~\u0000@sq\u0000~"
							+ "\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~"
							+ "\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000<freemind.controller.actions.generated.i"
							+ "nstance.UndoXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000"
							+ "\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u00009freemind."
							+ "controller.actions.generated.instance.FoldActionq\u0000~\u0000@sq\u0000~\u0000,\u0000"
							+ "\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q"
							+ "\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000>freemind.controller.actions.generated.inst"
							+ "ance.MoveNodesActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006"
							+ "\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000=freemind.c"
							+ "ontroller.actions.generated.instance.HookNodeActionq\u0000~\u0000@sq\u0000~"
							+ "\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~"
							+ "\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000<freemind.controller.actions.generated.i"
							+ "nstance.AddIconActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000"
							+ "\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Ffreemind."
							+ "controller.actions.generated.instance.RemoveLastIconXmlActio"
							+ "nq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1"
							+ "\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Ffreemind.controller.actions.g"
							+ "enerated.instance.RemoveAllIconsXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000"
							+ "\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~"
							+ "\u0000;sq\u0000~\u0000<t\u0000@freemind.controller.actions.generated.instance.Mo"
							+ "veNodeXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q"
							+ "\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000@freemind.contro"
							+ "ller.actions.generated.instance.AddCloudXmlActionq\u0000~\u0000@sq\u0000~\u0000,"
							+ "\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005"
							+ "q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Dfreemind.controller.actions.generated.ins"
							+ "tance.AddArrowLinkXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!p"
							+ "psq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000?fre"
							+ "emind.controller.actions.generated.instance.AddLinkXmlAction"
							+ "q\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013"
							+ "q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Gfreemind.controller.actions.ge"
							+ "nerated.instance.RemoveArrowLinkXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000"
							+ "\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~"
							+ "\u0000;sq\u0000~\u0000<t\u0000Ffreemind.controller.actions.generated.instance.Ar"
							+ "rowLinkColorXmlActionq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000"
							+ "\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Ffreemind."
							+ "controller.actions.generated.instance.ArrowLinkArrowXmlActio"
							+ "nq\u0000~\u0000@sq\u0000~\u0000,\u0000\u00bf\u00d1,q\u0000~\u0000\np\u0000sq\u0000~\u0000\u0000\u0000\u00bf\u00d1!ppsq\u0000~\u0000\u0006\u0000\u00bf\u00d1\u0016q\u0000~\u0000\npsq\u0000~\u00002\u0000\u00bf\u00d1"
							+ "\u0013q\u0000~\u0000\npq\u0000~\u00005q\u0000~\u00009q\u0000~\u0000;sq\u0000~\u0000<t\u0000Ffreemind.controller.actions.g"
							+ "enerated.instance.ArrowLinkPointXmlActionq\u0000~\u0000@q\u0000~\u0000;sr\u0000\"com.s"
							+ "un.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/s"
							+ "un/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.g"
							+ "rammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresh"
							+ "oldL\u0000\u0006parentq\u0000~\u0001\b[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression"
							+ ";xp\u0000\u0000\u0000g\u0000\u0000\u0000rpur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000"
							+ "xp\u0000\u0000\u0001\u007fq\u0000~\u0000\u0016ppppppppppppppq\u0000~\u0000)pq\u0000~\u0000\u0012ppppppppppppppq\u0000~\u0000%pq\u0000~\u0000"
							+ "\u000eppppppppppppppq\u0000~\u0000!ppppppppppppppppq\u0000~\u0000\u001dpppppppppq\u0000~\u0000\u00afq\u0000~\u0000\u00a9"
							+ "q\u0000~\u0000\u00a3q\u0000~\u0000\u009dq\u0000~\u0000\u0097q\u0000~\u0000\u0091q\u0000~\u0000\u008bq\u0000~\u0000\u0085q\u0000~\u0000\u007fq\u0000~\u0000yq\u0000~\u0000sq\u0000~\u0000\u00a8q\u0000~\u0000\u00a2q\u0000~\u0000\u009c"
							+ "q\u0000~\u0000\u0096q\u0000~\u0000\u0090q\u0000~\u0000\u008aq\u0000~\u0000\u0084q\u0000~\u0000~q\u0000~\u0000xq\u0000~\u0000rq\u0000~\u0000lq\u0000~\u0000fq\u0000~\u0000`q\u0000~\u0000Zq\u0000~\u0000T"
							+ "q\u0000~\u0000Nq\u0000~\u0000Hq\u0000~\u0000Bq\u0000~\u00000q\u0000~\u0000mq\u0000~\u0000gq\u0000~\u0000aq\u0000~\u0000[q\u0000~\u0000Uq\u0000~\u0000Oq\u0000~\u0000Iq\u0000~\u0000C"
							+ "q\u0000~\u00001q\u0000~\u0000(q\u0000~\u0000\u00aeq\u0000~\u0000\u0019q\u0000~\u0000\u00b5q\u0000~\u0000\u00b4q\u0000~\u0000\u00bbq\u0000~\u0000\u00baq\u0000~\u0000\u00c1q\u0000~\u0000\u00c0q\u0000~\u0000\u00c7q\u0000~\u0000\u00c6"
							+ "q\u0000~\u0000\u0015q\u0000~\u0000\u00cdq\u0000~\u0000\u00ccq\u0000~\u0000\u00d3q\u0000~\u0000\u00d2q\u0000~\u0000\u00d9q\u0000~\u0000$q\u0000~\u0000\u00d8q\u0000~\u0000\u00dfq\u0000~\u0000\u00deq\u0000~\u0000\u0011q\u0000~\u0000\u00e5"
							+ "q\u0000~\u0000\u00e4q\u0000~\u0000\u00ebq\u0000~\u0000\u00eaq\u0000~\u0000\u00f1q\u0000~\u0000\u00f0q\u0000~\u0000\u00f7q\u0000~\u0000\u00f6q\u0000~\u0000\rq\u0000~\u0000\u00fdq\u0000~\u0000\u00fcq\u0000~\u0001\u0003q\u0000~\u0000 "
							+ "q\u0000~\u0001\u0002pppppppppppppppq\u0000~\u0000\u001cppppppppppppppppq\u0000~\u0000\u0018pppppppppppppp"
							+ "q\u0000~\u0000+pq\u0000~\u0000\u0014ppppppppppppppq\u0000~\u0000\'pq\u0000~\u0000\u0010ppppppppppppppq\u0000~\u0000#pq\u0000~\u0000"
							+ "\fppppppppppppppq\u0000~\u0000\u001fppppppppppppppppq\u0000~\u0000\u001bppppppppppppppppq\u0000~"
							+ "\u0000\u0017ppppppppppppppq\u0000~\u0000*pq\u0000~\u0000\u0013ppppppppppppppq\u0000~\u0000&pq\u0000~\u0000\u000fpppppppp"
							+ "ppppppq\u0000~\u0000\"pq\u0000~\u0000\u000bppq\u0000~\u0000\bppppppppppq\u0000~\u0000\u0005q\u0000~\u0000\u001epppppppppppppppp"
							+ "q\u0000~\u0000\u001apppppppppppppppp"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	public class Unmarshaller
			extends
			freemind.controller.actions.generated.instance.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
			super(context, "---");
		}

		protected Unmarshaller(
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		public java.lang.Object owner() {
			return freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.this;
		}

		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					spawnHandlerFromEnterElement(
							(((freemind.controller.actions.generated.instance.impl.XmlActionImpl) freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.this).new Unmarshaller(
									context)), 1, ___uri, ___local, ___qname,
							__atts);
					return;
				case 2:
					if (("compound_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.CompoundActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.CompoundActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("select_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("cut_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.CutNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.CutNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("paste_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("revert_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("bold_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("italic_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("underlined_node_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("font_size_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("font_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.FontNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.FontNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("node_color_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("node_background_color_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("node_style_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edge_color_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edge_width_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edge_style_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("delete_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edit_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EditNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EditNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("new_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NewNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NewNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("undo_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("fold_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.FoldActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.FoldActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("move_nodes_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("hook_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.HookNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.HookNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					// ICONS
					// if (("add_icon_action" == ___local) && ("" == ___uri)) {
					// _CompoundActionOrSelectNodeActionOrCutNodeAction
					// .add(((freemind.icons.layaspects.AddIconActionImpl)
					// spawnChildFromEnterElement(
					// (freemind.icons.layaspects.AddIconActionImpl.class),
					// 2, ___uri, ___local, ___qname, __atts)));
					// return;
					// }
					// if (("remove_last_icon_xml_action" == ___local)
					// && ("" == ___uri)) {
					// _CompoundActionOrSelectNodeActionOrCutNodeAction
					// .add(((freemind.icons.layaspects.RemoveLastIconXmlActionImpl)
					// spawnChildFromEnterElement(
					// (freemind.icons.layaspects.RemoveLastIconXmlActionImpl.class),
					// 2, ___uri, ___local, ___qname, __atts)));
					// return;
					// }
					// if (("remove_all_icons_xml_action" == ___local)
					// && ("" == ___uri)) {
					// _CompoundActionOrSelectNodeActionOrCutNodeAction
					// .add(((freemind.icons.layaspects.RemoveAllIconsXmlActionImpl)
					// spawnChildFromEnterElement(
					// (freemind.icons.layaspects.RemoveAllIconsXmlActionImpl.class),
					// 2, ___uri, ___local, ___qname, __atts)));
					// return;
					// }
					if (("move_node_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					// CLOUDS
					// if (("add_cloud_xml_action" == ___local) && ("" ==
					// ___uri)) {
					// _CompoundActionOrSelectNodeActionOrCutNodeAction
					// .add(((freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl)
					// spawnChildFromEnterElement(
					// (freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl.class),
					// 2, ___uri, ___local, ___qname, __atts)));
					// return;
					// }
					if (("add_arrow_link_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("add_link_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("remove_arrow_link_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("arrow_link_color_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("arrow_link_arrow_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("arrow_link_point_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				case 1:
					if (("compound_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.CompoundActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.CompoundActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("select_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("cut_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.CutNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.CutNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("paste_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("revert_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("bold_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("italic_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("underlined_node_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("font_size_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("font_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.FontNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.FontNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("node_color_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("node_background_color_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("node_style_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edge_color_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edge_width_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edge_style_format_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("delete_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("edit_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.EditNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.EditNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("new_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.NewNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.NewNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("undo_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("fold_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.FoldActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.FoldActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("move_nodes_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("hook_node_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.HookNodeActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.HookNodeActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					//ICONS
//					if (("add_icon_action" == ___local) && ("" == ___uri)) {
//						_CompoundActionOrSelectNodeActionOrCutNodeAction
//								.add(((freemind.icons.layaspects.AddIconActionImpl) spawnChildFromEnterElement(
//										(freemind.icons.layaspects.AddIconActionImpl.class),
//										2, ___uri, ___local, ___qname, __atts)));
//						return;
//					}
//					if (("remove_last_icon_xml_action" == ___local)
//							&& ("" == ___uri)) {
//						_CompoundActionOrSelectNodeActionOrCutNodeAction
//								.add(((freemind.icons.layaspects.RemoveLastIconXmlActionImpl) spawnChildFromEnterElement(
//										(freemind.icons.layaspects.RemoveLastIconXmlActionImpl.class),
//										2, ___uri, ___local, ___qname, __atts)));
//						return;
//					}
//					if (("remove_all_icons_xml_action" == ___local)
//							&& ("" == ___uri)) {
//						_CompoundActionOrSelectNodeActionOrCutNodeAction
//								.add(((freemind.icons.layaspects.RemoveAllIconsXmlActionImpl) spawnChildFromEnterElement(
//										(freemind.icons.layaspects.RemoveAllIconsXmlActionImpl.class),
//										2, ___uri, ___local, ___qname, __atts)));
//						return;
//					}
					if (("move_node_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					// CLOUDS
					// if (("add_cloud_xml_action" == ___local) && ("" ==
					// ___uri)) {
					// _CompoundActionOrSelectNodeActionOrCutNodeAction
					// .add(((freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl)
					// spawnChildFromEnterElement(
					// (freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl.class),
					// 2, ___uri, ___local, ___qname, __atts)));
					// return;
					// }
					if (("add_arrow_link_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("add_link_xml_action" == ___local) && ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("remove_arrow_link_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("arrow_link_color_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("arrow_link_arrow_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					if (("arrow_link_point_xml_action" == ___local)
							&& ("" == ___uri)) {
						_CompoundActionOrSelectNodeActionOrCutNodeAction
								.add(((freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl) spawnChildFromEnterElement(
										(freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl.class),
										2, ___uri, ___local, ___qname, __atts)));
						return;
					}
					state = 2;
					continue outer;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					spawnHandlerFromLeaveElement(
							(((freemind.controller.actions.generated.instance.impl.XmlActionImpl) freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.this).new Unmarshaller(
									context)), 1, ___uri, ___local, ___qname);
					return;
				case 2:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				case 1:
					state = 2;
					continue outer;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					spawnHandlerFromEnterAttribute(
							(((freemind.controller.actions.generated.instance.impl.XmlActionImpl) freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.this).new Unmarshaller(
									context)), 1, ___uri, ___local, ___qname);
					return;
				case 2:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				case 1:
					state = 2;
					continue outer;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 0:
					spawnHandlerFromLeaveAttribute(
							(((freemind.controller.actions.generated.instance.impl.XmlActionImpl) freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.this).new Unmarshaller(
									context)), 1, ___uri, ___local, ___qname);
					return;
				case 2:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 1:
					state = 2;
					continue outer;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 0:
						spawnHandlerFromText(
								(((freemind.controller.actions.generated.instance.impl.XmlActionImpl) freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl.this).new Unmarshaller(
										context)), 1, value);
						return;
					case 2:
						revertToParentFromText(value);
						return;
					case 1:
						state = 2;
						continue outer;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

	}

}
