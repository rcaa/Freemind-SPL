//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.02.23 at 11:11:43 GMT+01:00 
//

package freemind.controller.actions.generated.instance;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the
 * freemind.controller.actions.generated.instance package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
public class ObjectFactory
		extends
		freemind.controller.actions.generated.instance.impl.runtime.DefaultJAXBContextImpl {

	private static java.util.HashMap defaultImplementations = new java.util.HashMap();
	public final static java.lang.Class version = (freemind.controller.actions.generated.instance.impl.JAXBVersion.class);

	static {
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TimeWindowColumnSetting",
						"freemind.controller.actions.generated.instance.impl.TimeWindowColumnSettingImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CloudColorXmlAction",
						"freemind.controller.actions.generated.instance.impl.CloudColorXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddIconActionType",
						"freemind.controller.actions.generated.instance.impl.AddIconActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TransferableContent",
						"freemind.controller.actions.generated.instance.impl.TransferableContentImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeBackgroundColorFormatAction",
						"freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ItalicNodeAction",
						"freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CompoundAction",
						"freemind.controller.actions.generated.instance.impl.CompoundActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.OptionPanelWindowConfigurationStorageType",
						"freemind.controller.actions.generated.instance.impl.OptionPanelWindowConfigurationStorageTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginType",
						"freemind.controller.actions.generated.instance.impl.PluginTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ItalicNodeActionType",
						"freemind.controller.actions.generated.instance.impl.ItalicNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddCloudXmlAction",
						"freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddIconAction",
						"freemind.controller.actions.generated.instance.impl.AddIconActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ArrowLinkPointXmlAction",
						"freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PasteNodeAction",
						"freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CutNodeActionType",
						"freemind.controller.actions.generated.instance.impl.CutNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuSubmenu",
						"freemind.controller.actions.generated.instance.impl.MenuSubmenuImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EdgeColorFormatAction",
						"freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CollaborationAction",
						"freemind.controller.actions.generated.instance.impl.CollaborationActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FoldAction",
						"freemind.controller.actions.generated.instance.impl.FoldActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuSeparator",
						"freemind.controller.actions.generated.instance.impl.MenuSeparatorImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeListMember",
						"freemind.controller.actions.generated.instance.impl.NodeListMemberImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FontSizeNodeAction",
						"freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuSeparatorType",
						"freemind.controller.actions.generated.instance.impl.MenuSeparatorTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuAction",
						"freemind.controller.actions.generated.instance.impl.MenuActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.UndoXmlAction",
						"freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NewNodeActionType",
						"freemind.controller.actions.generated.instance.impl.NewNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuCategoryBase",
						"freemind.controller.actions.generated.instance.impl.MenuCategoryBaseImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.DeleteNodeActionType",
						"freemind.controller.actions.generated.instance.impl.DeleteNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeAction",
						"freemind.controller.actions.generated.instance.impl.NodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.UnderlinedNodeAction",
						"freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeColorFormatActionType",
						"freemind.controller.actions.generated.instance.impl.NodeColorFormatActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginStringType",
						"freemind.controller.actions.generated.instance.impl.PluginStringTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RemoveLastIconXmlAction",
						"freemind.controller.actions.generated.instance.impl.RemoveLastIconXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuCheckedAction",
						"freemind.controller.actions.generated.instance.impl.MenuCheckedActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuSubmenuType",
						"freemind.controller.actions.generated.instance.impl.MenuSubmenuTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CollaborationActionType",
						"freemind.controller.actions.generated.instance.impl.CollaborationActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TimeWindowConfigurationStorageType",
						"freemind.controller.actions.generated.instance.impl.TimeWindowConfigurationStorageTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.UnderlinedNodeActionType",
						"freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CutNodeAction",
						"freemind.controller.actions.generated.instance.impl.CutNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.HookNodeActionType",
						"freemind.controller.actions.generated.instance.impl.HookNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddLinkXmlActionType",
						"freemind.controller.actions.generated.instance.impl.AddLinkXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginProperty",
						"freemind.controller.actions.generated.instance.impl.PluginPropertyImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.HookNodeAction",
						"freemind.controller.actions.generated.instance.impl.HookNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RemoveArrowLinkXmlAction",
						"freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FormatNodeAction",
						"freemind.controller.actions.generated.instance.impl.FormatNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginMenuType",
						"freemind.controller.actions.generated.instance.impl.PluginMenuTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeColorFormatAction",
						"freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginModeType",
						"freemind.controller.actions.generated.instance.impl.PluginModeTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginAction",
						"freemind.controller.actions.generated.instance.impl.PluginActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.UndoXmlActionType",
						"freemind.controller.actions.generated.instance.impl.UndoXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddArrowLinkXmlAction",
						"freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ArrowLinkPointXmlActionType",
						"freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MoveNodesAction",
						"freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginStringsType",
						"freemind.controller.actions.generated.instance.impl.PluginStringsTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RemoveArrowLinkXmlActionType",
						"freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.SelectNodeAction",
						"freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddArrowLinkXmlActionType",
						"freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuCheckedActionType",
						"freemind.controller.actions.generated.instance.impl.MenuCheckedActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginMenu",
						"freemind.controller.actions.generated.instance.impl.PluginMenuImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginStrings",
						"freemind.controller.actions.generated.instance.impl.PluginStringsImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CompoundActionType",
						"freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TimeWindowConfigurationStorage",
						"freemind.controller.actions.generated.instance.impl.TimeWindowConfigurationStorageImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuStructure",
						"freemind.controller.actions.generated.instance.impl.MenuStructureImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PasteNodeActionType",
						"freemind.controller.actions.generated.instance.impl.PasteNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuCategory",
						"freemind.controller.actions.generated.instance.impl.MenuCategoryImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.XmlAction",
						"freemind.controller.actions.generated.instance.impl.XmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ArrowLinkArrowXmlAction",
						"freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginString",
						"freemind.controller.actions.generated.instance.impl.PluginStringImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EdgeStyleFormatAction",
						"freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MoveNodeXmlAction",
						"freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EdgeColorFormatActionType",
						"freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MoveNodeXmlActionType",
						"freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FontNodeAction",
						"freemind.controller.actions.generated.instance.impl.FontNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MoveNodesActionType",
						"freemind.controller.actions.generated.instance.impl.MoveNodesActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EdgeWidthFormatAction",
						"freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RevertXmlActionType",
						"freemind.controller.actions.generated.instance.impl.RevertXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EditNodeAction",
						"freemind.controller.actions.generated.instance.impl.EditNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.Plugin",
						"freemind.controller.actions.generated.instance.impl.PluginImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.WindowConfigurationStorage",
						"freemind.controller.actions.generated.instance.impl.WindowConfigurationStorageImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FoldActionType",
						"freemind.controller.actions.generated.instance.impl.FoldActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ArrowLinkColorXmlActionType",
						"freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginRegistration",
						"freemind.controller.actions.generated.instance.impl.PluginRegistrationImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.CloudColorXmlActionType",
						"freemind.controller.actions.generated.instance.impl.CloudColorXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.OptionPanelWindowConfigurationStorage",
						"freemind.controller.actions.generated.instance.impl.OptionPanelWindowConfigurationStorageImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FontSizeNodeActionType",
						"freemind.controller.actions.generated.instance.impl.FontSizeNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginPropertyType",
						"freemind.controller.actions.generated.instance.impl.PluginPropertyTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeListMemberType",
						"freemind.controller.actions.generated.instance.impl.NodeListMemberTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TransferableContentType",
						"freemind.controller.actions.generated.instance.impl.TransferableContentTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RemoveLastIconXmlActionType",
						"freemind.controller.actions.generated.instance.impl.RemoveLastIconXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RemoveAllIconsXmlActionType",
						"freemind.controller.actions.generated.instance.impl.RemoveAllIconsXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.SelectNodeActionType",
						"freemind.controller.actions.generated.instance.impl.SelectNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NewNodeAction",
						"freemind.controller.actions.generated.instance.impl.NewNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NormalWindowConfigurationStorage",
						"freemind.controller.actions.generated.instance.impl.NormalWindowConfigurationStorageImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RevertXmlAction",
						"freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginActionType",
						"freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EdgeStyleFormatActionType",
						"freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.DeleteNodeAction",
						"freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuStructureType",
						"freemind.controller.actions.generated.instance.impl.MenuStructureTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NormalWindowConfigurationStorageType",
						"freemind.controller.actions.generated.instance.impl.NormalWindowConfigurationStorageTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeStyleFormatAction",
						"freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.BoldNodeActionType",
						"freemind.controller.actions.generated.instance.impl.BoldNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.FontNodeActionType",
						"freemind.controller.actions.generated.instance.impl.FontNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EditNodeActionType",
						"freemind.controller.actions.generated.instance.impl.EditNodeActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuCategoryType",
						"freemind.controller.actions.generated.instance.impl.MenuCategoryTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginClasspathType",
						"freemind.controller.actions.generated.instance.impl.PluginClasspathTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginMode",
						"freemind.controller.actions.generated.instance.impl.PluginModeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddLinkXmlAction",
						"freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginClasspath",
						"freemind.controller.actions.generated.instance.impl.PluginClasspathImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeBackgroundColorFormatActionType",
						"freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.EdgeWidthFormatActionType",
						"freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.AddCloudXmlActionType",
						"freemind.controller.actions.generated.instance.impl.AddCloudXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.PluginRegistrationType",
						"freemind.controller.actions.generated.instance.impl.PluginRegistrationTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ArrowLinkArrowXmlActionType",
						"freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuActionBase",
						"freemind.controller.actions.generated.instance.impl.MenuActionBaseImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.NodeStyleFormatActionType",
						"freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.BoldNodeAction",
						"freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TextNodeAction",
						"freemind.controller.actions.generated.instance.impl.TextNodeActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.ArrowLinkColorXmlAction",
						"freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.MenuActionType",
						"freemind.controller.actions.generated.instance.impl.MenuActionTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.TimeWindowColumnSettingType",
						"freemind.controller.actions.generated.instance.impl.TimeWindowColumnSettingTypeImpl");
		defaultImplementations
				.put("freemind.controller.actions.generated.instance.RemoveAllIconsXmlAction",
						"freemind.controller.actions.generated.instance.impl.RemoveAllIconsXmlActionImpl");
	}

	/**
	 * Create a new ObjectFactory that can be used to create new instances of
	 * schema derived classes for package:
	 * freemind.controller.actions.generated.instance
	 * 
	 */
	public ObjectFactory() {
		super(
				new freemind.controller.actions.generated.instance.ObjectFactory.GrammarInfoImpl());
	}

	/**
	 * Create an instance of the specified Java content interface.
	 * 
	 * @param javaContentInterface
	 *            the Class object of the javacontent interface to instantiate
	 * @return a new instance
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public java.lang.Object newInstance(java.lang.Class javaContentInterface)
			throws javax.xml.bind.JAXBException {
		return super.newInstance(javaContentInterface);
	}

	/**
	 * Get the specified property. This method can only be used to get provider
	 * specific properties. Attempting to get an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @return the value of the requested property
	 * @throws PropertyException
	 *             when there is an error retrieving the given property or value
	 */
	public java.lang.Object getProperty(java.lang.String name)
			throws javax.xml.bind.PropertyException {
		return super.getProperty(name);
	}

	/**
	 * Set the specified property. This method can only be used to set provider
	 * specific properties. Attempting to set an undefined property will result
	 * in a PropertyException being thrown.
	 * 
	 * @param name
	 *            the name of the property to retrieve
	 * @param value
	 *            the value of the property to be set
	 * @throws PropertyException
	 *             when there is an error processing the given property or value
	 */
	public void setProperty(java.lang.String name, java.lang.Object value)
			throws javax.xml.bind.PropertyException {
		super.setProperty(name, value);
	}

	/**
	 * Create an instance of TimeWindowColumnSetting
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TimeWindowColumnSetting createTimeWindowColumnSetting()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TimeWindowColumnSettingImpl();
	}

	/**
	 * Create an instance of CloudColorXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// CLOUDS
	// public freemind.controller.actions.generated.instance.CloudColorXmlAction
	// createCloudColorXmlAction()
	// throws javax.xml.bind.JAXBException {
	// return new
	// freemind.controller.actions.generated.instance.impl.CloudColorXmlActionImpl();
	// }

	/**
	 * Create an instance of AddIconActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// ICONS
	// public freemind.controller.actions.generated.instance.AddIconActionType
	// createAddIconActionType()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.icons.layaspects.AddIconActionTypeImpl();
	// }

	/**
	 * Create an instance of TransferableContent
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TransferableContent createTransferableContent()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TransferableContentImpl();
	}

	/**
	 * Create an instance of NodeBackgroundColorFormatAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeBackgroundColorFormatAction createNodeBackgroundColorFormatAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl();
	}

	/**
	 * Create an instance of ItalicNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ItalicNodeAction createItalicNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl();
	}

	/**
	 * Create an instance of CompoundAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.CompoundAction createCompoundAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.CompoundActionImpl();
	}

	/**
	 * Create an instance of OptionPanelWindowConfigurationStorageType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.OptionPanelWindowConfigurationStorageType createOptionPanelWindowConfigurationStorageType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.OptionPanelWindowConfigurationStorageTypeImpl();
	}

	/**
	 * Create an instance of PluginType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginType createPluginType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginTypeImpl();
	}

	/**
	 * Create an instance of ItalicNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ItalicNodeActionType createItalicNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ItalicNodeActionTypeImpl();
	}

	/**
	 * Create an instance of AddCloudXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// CLOUDS
	// public freemind.clouds.clazz.AddCloudXmlAction createAddCloudXmlAction()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.clouds.clazz.AddCloudXmlActionImpl();
	// }

	/**
	 * Create an instance of AddIconAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// ICONS
	// public freemind.controller.actions.generated.instance.AddIconAction
	// createAddIconAction()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.icons.layaspects.AddIconActionImpl();
	// }

	/**
	 * Create an instance of ArrowLinkPointXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ArrowLinkPointXmlAction createArrowLinkPointXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl();
	}

	/**
	 * Create an instance of PasteNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PasteNodeAction createPasteNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl();
	}

	/**
	 * Create an instance of CutNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.CutNodeActionType createCutNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.CutNodeActionTypeImpl();
	}

	/**
	 * Create an instance of MenuSubmenu
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuSubmenu createMenuSubmenu()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuSubmenuImpl();
	}

	/**
	 * Create an instance of EdgeColorFormatAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EdgeColorFormatAction createEdgeColorFormatAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl();
	}

	/**
	 * Create an instance of CollaborationAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.CollaborationAction createCollaborationAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.CollaborationActionImpl();
	}

	/**
	 * Create an instance of FoldAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FoldAction createFoldAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FoldActionImpl();
	}

	/**
	 * Create an instance of MenuSeparator
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuSeparator createMenuSeparator()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuSeparatorImpl();
	}

	/**
	 * Create an instance of NodeListMember
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeListMember createNodeListMember()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeListMemberImpl();
	}

	/**
	 * Create an instance of FontSizeNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FontSizeNodeAction createFontSizeNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl();
	}

	/**
	 * Create an instance of MenuSeparatorType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuSeparatorType createMenuSeparatorType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuSeparatorTypeImpl();
	}

	/**
	 * Create an instance of MenuAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuAction createMenuAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuActionImpl();
	}

	/**
	 * Create an instance of UndoXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.UndoXmlAction createUndoXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl();
	}

	/**
	 * Create an instance of NewNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NewNodeActionType createNewNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NewNodeActionTypeImpl();
	}

	/**
	 * Create an instance of MenuCategoryBase
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuCategoryBase createMenuCategoryBase()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuCategoryBaseImpl();
	}

	/**
	 * Create an instance of DeleteNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.DeleteNodeActionType createDeleteNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.DeleteNodeActionTypeImpl();
	}

	/**
	 * Create an instance of NodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeAction createNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeActionImpl();
	}

	/**
	 * Create an instance of UnderlinedNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.UnderlinedNodeAction createUnderlinedNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl();
	}

	/**
	 * Create an instance of NodeColorFormatActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeColorFormatActionType createNodeColorFormatActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeColorFormatActionTypeImpl();
	}

	/**
	 * Create an instance of PluginStringType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginStringType createPluginStringType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginStringTypeImpl();
	}

	/**
	 * Create an instance of RemoveLastIconXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// ICONS
	// public
	// freemind.controller.actions.generated.instance.RemoveLastIconXmlAction
	// createRemoveLastIconXmlAction()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.icons.layaspects.RemoveLastIconXmlActionImpl();
	// }

	/**
	 * Create an instance of MenuCheckedAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuCheckedAction createMenuCheckedAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuCheckedActionImpl();
	}

	/**
	 * Create an instance of MenuSubmenuType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuSubmenuType createMenuSubmenuType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuSubmenuTypeImpl();
	}

	/**
	 * Create an instance of CollaborationActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.CollaborationActionType createCollaborationActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.CollaborationActionTypeImpl();
	}

	/**
	 * Create an instance of TimeWindowConfigurationStorageType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TimeWindowConfigurationStorageType createTimeWindowConfigurationStorageType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TimeWindowConfigurationStorageTypeImpl();
	}

	/**
	 * Create an instance of UnderlinedNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.UnderlinedNodeActionType createUnderlinedNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionTypeImpl();
	}

	/**
	 * Create an instance of CutNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.CutNodeAction createCutNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.CutNodeActionImpl();
	}

	/**
	 * Create an instance of HookNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.HookNodeActionType createHookNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.HookNodeActionTypeImpl();
	}

	/**
	 * Create an instance of AddLinkXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.AddLinkXmlActionType createAddLinkXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.AddLinkXmlActionTypeImpl();
	}

	/**
	 * Create an instance of PluginProperty
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginProperty createPluginProperty()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginPropertyImpl();
	}

	/**
	 * Create an instance of HookNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.HookNodeAction createHookNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.HookNodeActionImpl();
	}

	/**
	 * Create an instance of RemoveArrowLinkXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.RemoveArrowLinkXmlAction createRemoveArrowLinkXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl();
	}

	/**
	 * Create an instance of FormatNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FormatNodeAction createFormatNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FormatNodeActionImpl();
	}

	/**
	 * Create an instance of PluginMenuType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginMenuType createPluginMenuType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginMenuTypeImpl();
	}

	/**
	 * Create an instance of NodeColorFormatAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeColorFormatAction createNodeColorFormatAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl();
	}

	/**
	 * Create an instance of PluginModeType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginModeType createPluginModeType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginModeTypeImpl();
	}

	/**
	 * Create an instance of PluginAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginAction createPluginAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginActionImpl();
	}

	/**
	 * Create an instance of UndoXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.UndoXmlActionType createUndoXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.UndoXmlActionTypeImpl();
	}

	/**
	 * Create an instance of AddArrowLinkXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.AddArrowLinkXmlAction createAddArrowLinkXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl();
	}

	/**
	 * Create an instance of ArrowLinkPointXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ArrowLinkPointXmlActionType createArrowLinkPointXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionTypeImpl();
	}

	/**
	 * Create an instance of MoveNodesAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MoveNodesAction createMoveNodesAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl();
	}

	/**
	 * Create an instance of PluginStringsType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginStringsType createPluginStringsType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginStringsTypeImpl();
	}

	/**
	 * Create an instance of RemoveArrowLinkXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.RemoveArrowLinkXmlActionType createRemoveArrowLinkXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionTypeImpl();
	}

	/**
	 * Create an instance of SelectNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.SelectNodeAction createSelectNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl();
	}

	/**
	 * Create an instance of AddArrowLinkXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.AddArrowLinkXmlActionType createAddArrowLinkXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionTypeImpl();
	}

	/**
	 * Create an instance of MenuCheckedActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuCheckedActionType createMenuCheckedActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuCheckedActionTypeImpl();
	}

	/**
	 * Create an instance of PluginMenu
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginMenu createPluginMenu()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginMenuImpl();
	}

	/**
	 * Create an instance of PluginStrings
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginStrings createPluginStrings()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginStringsImpl();
	}

	/**
	 * Create an instance of CompoundActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.CompoundActionType createCompoundActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.CompoundActionTypeImpl();
	}

	/**
	 * Create an instance of TimeWindowConfigurationStorage
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TimeWindowConfigurationStorage createTimeWindowConfigurationStorage()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TimeWindowConfigurationStorageImpl();
	}

	/**
	 * Create an instance of MenuStructure
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuStructure createMenuStructure()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuStructureImpl();
	}

	/**
	 * Create an instance of PasteNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PasteNodeActionType createPasteNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PasteNodeActionTypeImpl();
	}

	/**
	 * Create an instance of MenuCategory
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuCategory createMenuCategory()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuCategoryImpl();
	}

	/**
	 * Create an instance of XmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.XmlAction createXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.XmlActionImpl();
	}

	/**
	 * Create an instance of ArrowLinkArrowXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ArrowLinkArrowXmlAction createArrowLinkArrowXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl();
	}

	/**
	 * Create an instance of PluginString
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginString createPluginString()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginStringImpl();
	}

	/**
	 * Create an instance of EdgeStyleFormatAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EdgeStyleFormatAction createEdgeStyleFormatAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl();
	}

	/**
	 * Create an instance of MoveNodeXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MoveNodeXmlAction createMoveNodeXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl();
	}

	/**
	 * Create an instance of EdgeColorFormatActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EdgeColorFormatActionType createEdgeColorFormatActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionTypeImpl();
	}

	/**
	 * Create an instance of MoveNodeXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MoveNodeXmlActionType createMoveNodeXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionTypeImpl();
	}

	/**
	 * Create an instance of FontNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FontNodeAction createFontNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FontNodeActionImpl();
	}

	/**
	 * Create an instance of MoveNodesActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MoveNodesActionType createMoveNodesActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MoveNodesActionTypeImpl();
	}

	/**
	 * Create an instance of EdgeWidthFormatAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EdgeWidthFormatAction createEdgeWidthFormatAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl();
	}

	/**
	 * Create an instance of RevertXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.RevertXmlActionType createRevertXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.RevertXmlActionTypeImpl();
	}

	/**
	 * Create an instance of EditNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EditNodeAction createEditNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EditNodeActionImpl();
	}

	/**
	 * Create an instance of Plugin
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.Plugin createPlugin()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginImpl();
	}

	/**
	 * Create an instance of WindowConfigurationStorage
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.WindowConfigurationStorage createWindowConfigurationStorage()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.WindowConfigurationStorageImpl();
	}

	/**
	 * Create an instance of FoldActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FoldActionType createFoldActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FoldActionTypeImpl();
	}

	/**
	 * Create an instance of ArrowLinkColorXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ArrowLinkColorXmlActionType createArrowLinkColorXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionTypeImpl();
	}

	/**
	 * Create an instance of PluginRegistration
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginRegistration createPluginRegistration()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginRegistrationImpl();
	}

	/**
	 * Create an instance of CloudColorXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// CLOUDS
	// public
	// freemind.controller.actions.generated.instance.CloudColorXmlActionType
	// createCloudColorXmlActionType()
	// throws javax.xml.bind.JAXBException {
	// return new
	// freemind.controller.actions.generated.instance.impl.CloudColorXmlActionTypeImpl();
	// }

	/**
	 * Create an instance of OptionPanelWindowConfigurationStorage
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.OptionPanelWindowConfigurationStorage createOptionPanelWindowConfigurationStorage()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.OptionPanelWindowConfigurationStorageImpl();
	}

	/**
	 * Create an instance of FontSizeNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FontSizeNodeActionType createFontSizeNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FontSizeNodeActionTypeImpl();
	}

	/**
	 * Create an instance of PluginPropertyType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginPropertyType createPluginPropertyType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginPropertyTypeImpl();
	}

	/**
	 * Create an instance of NodeListMemberType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeListMemberType createNodeListMemberType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeListMemberTypeImpl();
	}

	/**
	 * Create an instance of TransferableContentType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TransferableContentType createTransferableContentType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TransferableContentTypeImpl();
	}

	/**
	 * Create an instance of RemoveLastIconXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// ICONS
	// public
	// freemind.controller.actions.generated.instance.RemoveLastIconXmlActionType
	// createRemoveLastIconXmlActionType()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.icons.layaspects.RemoveLastIconXmlActionTypeImpl();
	// }

	/**
	 * Create an instance of RemoveAllIconsXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// ICONS
	// public
	// freemind.controller.actions.generated.instance.RemoveAllIconsXmlActionType
	// createRemoveAllIconsXmlActionType()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.icons.layaspects.RemoveAllIconsXmlActionTypeImpl();
	// }

	/**
	 * Create an instance of SelectNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.SelectNodeActionType createSelectNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.SelectNodeActionTypeImpl();
	}

	/**
	 * Create an instance of NewNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NewNodeAction createNewNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NewNodeActionImpl();
	}

	/**
	 * Create an instance of NormalWindowConfigurationStorage
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NormalWindowConfigurationStorage createNormalWindowConfigurationStorage()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NormalWindowConfigurationStorageImpl();
	}

	/**
	 * Create an instance of RevertXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.RevertXmlAction createRevertXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl();
	}

	/**
	 * Create an instance of PluginActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginActionType createPluginActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginActionTypeImpl();
	}

	/**
	 * Create an instance of EdgeStyleFormatActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EdgeStyleFormatActionType createEdgeStyleFormatActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionTypeImpl();
	}

	/**
	 * Create an instance of DeleteNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.DeleteNodeAction createDeleteNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl();
	}

	/**
	 * Create an instance of MenuStructureType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuStructureType createMenuStructureType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuStructureTypeImpl();
	}

	/**
	 * Create an instance of NormalWindowConfigurationStorageType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NormalWindowConfigurationStorageType createNormalWindowConfigurationStorageType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NormalWindowConfigurationStorageTypeImpl();
	}

	/**
	 * Create an instance of NodeStyleFormatAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeStyleFormatAction createNodeStyleFormatAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl();
	}

	/**
	 * Create an instance of BoldNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.BoldNodeActionType createBoldNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.BoldNodeActionTypeImpl();
	}

	/**
	 * Create an instance of FontNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.FontNodeActionType createFontNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.FontNodeActionTypeImpl();
	}

	/**
	 * Create an instance of EditNodeActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EditNodeActionType createEditNodeActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EditNodeActionTypeImpl();
	}

	/**
	 * Create an instance of MenuCategoryType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuCategoryType createMenuCategoryType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuCategoryTypeImpl();
	}

	/**
	 * Create an instance of PluginClasspathType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginClasspathType createPluginClasspathType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginClasspathTypeImpl();
	}

	/**
	 * Create an instance of PluginMode
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginMode createPluginMode()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginModeImpl();
	}

	/**
	 * Create an instance of AddLinkXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.AddLinkXmlAction createAddLinkXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl();
	}

	/**
	 * Create an instance of PluginClasspath
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginClasspath createPluginClasspath()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginClasspathImpl();
	}

	/**
	 * Create an instance of NodeBackgroundColorFormatActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeBackgroundColorFormatActionType createNodeBackgroundColorFormatActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionTypeImpl();
	}

	/**
	 * Create an instance of EdgeWidthFormatActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.EdgeWidthFormatActionType createEdgeWidthFormatActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionTypeImpl();
	}

	/**
	 * Create an instance of AddCloudXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// CLOUDS
	// public
	// freemind.controller.actions.generated.instance.AddCloudXmlActionType
	// createAddCloudXmlActionType()
	// throws javax.xml.bind.JAXBException {
	// return new
	// freemind.controller.actions.generated.instance.impl.AddCloudXmlActionTypeImpl();
	// }

	/**
	 * Create an instance of PluginRegistrationType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.PluginRegistrationType createPluginRegistrationType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.PluginRegistrationTypeImpl();
	}

	/**
	 * Create an instance of ArrowLinkArrowXmlActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ArrowLinkArrowXmlActionType createArrowLinkArrowXmlActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionTypeImpl();
	}

	/**
	 * Create an instance of MenuActionBase
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuActionBase createMenuActionBase()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuActionBaseImpl();
	}

	/**
	 * Create an instance of NodeStyleFormatActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.NodeStyleFormatActionType createNodeStyleFormatActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionTypeImpl();
	}

	/**
	 * Create an instance of BoldNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.BoldNodeAction createBoldNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl();
	}

	/**
	 * Create an instance of TextNodeAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TextNodeAction createTextNodeAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TextNodeActionImpl();
	}

	/**
	 * Create an instance of ArrowLinkColorXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.ArrowLinkColorXmlAction createArrowLinkColorXmlAction()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl();
	}

	/**
	 * Create an instance of MenuActionType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.MenuActionType createMenuActionType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.MenuActionTypeImpl();
	}

	/**
	 * Create an instance of TimeWindowColumnSettingType
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	public freemind.controller.actions.generated.instance.TimeWindowColumnSettingType createTimeWindowColumnSettingType()
			throws javax.xml.bind.JAXBException {
		return new freemind.controller.actions.generated.instance.impl.TimeWindowColumnSettingTypeImpl();
	}

	/**
	 * Create an instance of RemoveAllIconsXmlAction
	 * 
	 * @throws JAXBException
	 *             if an error occurs
	 */
	// ICONS
	// public
	// freemind.controller.actions.generated.instance.RemoveAllIconsXmlAction
	// createRemoveAllIconsXmlAction()
	// throws javax.xml.bind.JAXBException {
	// return new freemind.icons.layaspects.RemoveAllIconsXmlActionImpl();
	// }

	private static class GrammarInfoImpl
			extends
			freemind.controller.actions.generated.instance.impl.runtime.AbstractGrammarInfoImpl {

		public java.lang.Class getDefaultImplementation(
				java.lang.Class javaContentInterface) {
			java.lang.Class c = null;
			try {
				c = java.lang.Class
						.forName(((java.lang.String) defaultImplementations
								.get(javaContentInterface.getName())));
			} catch (java.lang.Exception _x) {
				c = null;
			}
			return c;
		}

		public freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
				java.lang.String uri,
				java.lang.String local,
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
			if (("time_window_configuration_storage" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.TimeWindowConfigurationStorageImpl()
						.createUnmarshaller(context);
			}
			if (("hook_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.HookNodeActionImpl()
						.createUnmarshaller(context);
			}
			remove_all_icons_xml_action_hook(uri, local, context);
			if (("menu_category" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MenuCategoryImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_strings" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginStringsImpl()
						.createUnmarshaller(context);
			}
			if (("edit_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.EditNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("node_color_format_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl()
						.createUnmarshaller(context);
			}
			if (("normal_window_configuration_storage" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.NormalWindowConfigurationStorageImpl()
						.createUnmarshaller(context);
			}
			if (("add_arrow_link_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("revert_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("option_panel_window_configuration_storage" == local)
					&& ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.OptionPanelWindowConfigurationStorageImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_registration" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginRegistrationImpl()
						.createUnmarshaller(context);
			}
			if (("delete_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("menu_submenu" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MenuSubmenuImpl()
						.createUnmarshaller(context);
			}
			if (("node_style_format_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl()
						.createUnmarshaller(context);
			}
			if (("edge_style_format_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl()
						.createUnmarshaller(context);
			}

			// CLOUDS
			freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler unmarshallingEventHandler = xmlColorActionHook(
					uri, local, context);
			if (unmarshallingEventHandler != null) {
				return unmarshallingEventHandler;
			}

			if (("menu_structure" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MenuStructureImpl()
						.createUnmarshaller(context);
			}
			// if (("add_icon_action" == local) && ("" == uri)) {
			// return new freemind.icons.layaspects.AddIconActionImpl()
			// .createUnmarshaller(context);
			// }
			if (("cut_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.CutNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("collaboration_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.CollaborationActionImpl()
						.createUnmarshaller(context);
			}
			if (("arrow_link_arrow_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl()
						.createUnmarshaller(context);
			}
			// if (("remove_last_icon_xml_action" == local) && ("" == uri)) {
			// return new
			// freemind.icons.layaspects.RemoveLastIconXmlActionImpl()
			// .createUnmarshaller(context);
			// }
			if (("plugin_menu" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginMenuImpl()
						.createUnmarshaller(context);
			}
			if (("move_nodes_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_string" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginStringImpl()
						.createUnmarshaller(context);
			}
			if (("menu_checked_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MenuCheckedActionImpl()
						.createUnmarshaller(context);
			}
			if (("font_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.FontNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("arrow_link_point_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("paste_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl()
						.createUnmarshaller(context);
			}
			// CLOUDS
			// if (("add_cloud_xml_action" == local) && ("" == uri)) {
			// return new
			// freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl()
			// .createUnmarshaller(context);
			// }
			if (("new_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.NewNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginActionImpl()
						.createUnmarshaller(context);
			}
			if (("italic_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("time_window_column_setting" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.TimeWindowColumnSettingImpl()
						.createUnmarshaller(context);
			}
			if (("menu_separator" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MenuSeparatorImpl()
						.createUnmarshaller(context);
			}
			if (("menu_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MenuActionImpl()
						.createUnmarshaller(context);
			}
			if (("edge_width_format_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl()
						.createUnmarshaller(context);
			}
			if (("undo_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("transferable_content" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.TransferableContentImpl()
						.createUnmarshaller(context);
			}
			if (("select_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_property" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginPropertyImpl()
						.createUnmarshaller(context);
			}
			if (("move_node_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("font_size_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("add_link_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("plugin" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginImpl()
						.createUnmarshaller(context);
			}
			if (("arrow_link_color_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("edge_color_format_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl()
						.createUnmarshaller(context);
			}
			if (("remove_arrow_link_xml_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_mode" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginModeImpl()
						.createUnmarshaller(context);
			}
			if (("bold_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("underlined_node_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl()
						.createUnmarshaller(context);
			}
			if (("fold_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.FoldActionImpl()
						.createUnmarshaller(context);
			}
			if (("plugin_classpath" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.PluginClasspathImpl()
						.createUnmarshaller(context);
			}
			if (("compound_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.CompoundActionImpl()
						.createUnmarshaller(context);
			}
			if (("node_background_color_format_action" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl()
						.createUnmarshaller(context);
			}
			if (("node_list_member" == local) && ("" == uri)) {
				return new freemind.controller.actions.generated.instance.impl.NodeListMemberImpl()
						.createUnmarshaller(context);
			}
			return null;
		}

		// ICONS
		private void remove_all_icons_xml_action_hook(
				java.lang.String uri,
				java.lang.String local,
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
			// if (("remove_all_icons_xml_action" == local) && ("" == uri)) {
			// return new
			// freemind.icons.layaspects.RemoveAllIconsXmlActionImpl()
			// .createUnmarshaller(context);
			// }
		}

		// CLOUDS
		private freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler xmlColorActionHook(
				java.lang.String uri,
				java.lang.String local,
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
			// if (("cloud_color_xml_action" == local) && ("" == uri)) {
			// return new
			// freemind.controller.actions.generated.instance.impl.CloudColorXmlActionImpl()
			// .createUnmarshaller(context);
			// }
			return null;
		}

		public java.lang.Class getRootElement(java.lang.String uri,
				java.lang.String local) {
			if (("time_window_configuration_storage" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.TimeWindowConfigurationStorageImpl.class);
			}
			if (("hook_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.HookNodeActionImpl.class);
			}
			remove_last_icon_xml_action_hook(uri, local);
			if (("menu_category" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MenuCategoryImpl.class);
			}
			if (("plugin_strings" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginStringsImpl.class);
			}
			if (("edit_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.EditNodeActionImpl.class);
			}
			if (("node_color_format_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.NodeColorFormatActionImpl.class);
			}
			if (("normal_window_configuration_storage" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.NormalWindowConfigurationStorageImpl.class);
			}
			if (("add_arrow_link_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.AddArrowLinkXmlActionImpl.class);
			}
			if (("revert_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.RevertXmlActionImpl.class);
			}
			if (("option_panel_window_configuration_storage" == local)
					&& ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.OptionPanelWindowConfigurationStorageImpl.class);
			}
			if (("plugin_registration" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginRegistrationImpl.class);
			}
			if (("delete_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.DeleteNodeActionImpl.class);
			}
			if (("menu_submenu" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MenuSubmenuImpl.class);
			}
			if (("node_style_format_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.NodeStyleFormatActionImpl.class);
			}
			if (("edge_style_format_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.EdgeStyleFormatActionImpl.class);
			}

			// CLOUDS
			// java.lang.Class temp = xmlCloudColorHook(uri, local);

			if (("menu_structure" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MenuStructureImpl.class);
			}
			// if (("add_icon_action" == local) && ("" == uri)) {
			// return (freemind.icons.layaspects.AddIconActionImpl.class);
			// }
			if (("cut_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.CutNodeActionImpl.class);
			}
			if (("collaboration_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.CollaborationActionImpl.class);
			}
			if (("arrow_link_arrow_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.ArrowLinkArrowXmlActionImpl.class);
			}
			// if (("remove_last_icon_xml_action" == local) && ("" == uri)) {
			// return
			// (freemind.icons.layaspects.RemoveLastIconXmlActionImpl.class);
			// }
			if (("plugin_menu" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginMenuImpl.class);
			}
			if (("move_nodes_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MoveNodesActionImpl.class);
			}
			if (("plugin_string" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginStringImpl.class);
			}
			if (("menu_checked_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MenuCheckedActionImpl.class);
			}
			if (("font_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.FontNodeActionImpl.class);
			}
			if (("arrow_link_point_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.ArrowLinkPointXmlActionImpl.class);
			}
			if (("paste_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PasteNodeActionImpl.class);
			}
			// CLOUDS
			// if (("add_cloud_xml_action" == local) && ("" == uri)) {
			// return
			// (freemind.controller.actions.generated.instance.impl.AddCloudXmlActionImpl.class);
			// }
			if (("new_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.NewNodeActionImpl.class);
			}
			if (("plugin_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginActionImpl.class);
			}
			if (("italic_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.ItalicNodeActionImpl.class);
			}
			if (("time_window_column_setting" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.TimeWindowColumnSettingImpl.class);
			}
			if (("menu_separator" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MenuSeparatorImpl.class);
			}
			if (("menu_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MenuActionImpl.class);
			}
			if (("edge_width_format_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.EdgeWidthFormatActionImpl.class);
			}
			if (("undo_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.UndoXmlActionImpl.class);
			}
			if (("transferable_content" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.TransferableContentImpl.class);
			}
			if (("select_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.SelectNodeActionImpl.class);
			}
			if (("plugin_property" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginPropertyImpl.class);
			}
			if (("move_node_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.MoveNodeXmlActionImpl.class);
			}
			if (("font_size_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.FontSizeNodeActionImpl.class);
			}
			if (("add_link_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.AddLinkXmlActionImpl.class);
			}
			if (("plugin" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginImpl.class);
			}
			if (("arrow_link_color_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.ArrowLinkColorXmlActionImpl.class);
			}
			if (("edge_color_format_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.EdgeColorFormatActionImpl.class);
			}
			if (("remove_arrow_link_xml_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.RemoveArrowLinkXmlActionImpl.class);
			}
			if (("plugin_mode" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginModeImpl.class);
			}
			if (("bold_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.BoldNodeActionImpl.class);
			}
			if (("underlined_node_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.UnderlinedNodeActionImpl.class);
			}
			if (("fold_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.FoldActionImpl.class);
			}
			if (("plugin_classpath" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.PluginClasspathImpl.class);
			}
			if (("compound_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.CompoundActionImpl.class);
			}
			if (("node_background_color_format_action" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.NodeBackgroundColorFormatActionImpl.class);
			}
			if (("node_list_member" == local) && ("" == uri)) {
				return (freemind.controller.actions.generated.instance.impl.NodeListMemberImpl.class);
			}
			return null;
		}

		private void remove_last_icon_xml_action_hook(java.lang.String uri,
				java.lang.String local) {
			// if (("remove_all_icons_xml_action" == local) && ("" == uri)) {
			// return
			// (freemind.icons.layaspects.RemoveAllIconsXmlActionImpl.class);
			// }
		}

		// CLOUDS
		// private java.lang.Class xmlCloudColorHook(java.lang.String uri,
		// java.lang.String local) {
		// if (("cloud_color_xml_action" == local) && ("" == uri)) {
		// return
		// (freemind.controller.actions.generated.instance.impl.CloudColorXmlActionImpl.class);
		// }
		// return null;
		// }

		public boolean recognize(java.lang.String uri, java.lang.String local) {
			if (("time_window_configuration_storage" == local) && ("" == uri)) {
				return true;
			}
			if (("hook_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("remove_all_icons_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("menu_category" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_strings" == local) && ("" == uri)) {
				return true;
			}
			if (("edit_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("node_color_format_action" == local) && ("" == uri)) {
				return true;
			}
			if (("normal_window_configuration_storage" == local) && ("" == uri)) {
				return true;
			}
			if (("add_arrow_link_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("revert_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("option_panel_window_configuration_storage" == local)
					&& ("" == uri)) {
				return true;
			}
			if (("plugin_registration" == local) && ("" == uri)) {
				return true;
			}
			if (("delete_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("menu_submenu" == local) && ("" == uri)) {
				return true;
			}
			if (("node_style_format_action" == local) && ("" == uri)) {
				return true;
			}
			if (("edge_style_format_action" == local) && ("" == uri)) {
				return true;
			}
			// CLOUDS
			if (("cloud_color_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("menu_structure" == local) && ("" == uri)) {
				return true;
			}
			if (("add_icon_action" == local) && ("" == uri)) {
				return true;
			}
			if (("cut_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("collaboration_action" == local) && ("" == uri)) {
				return true;
			}
			if (("arrow_link_arrow_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("remove_last_icon_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_menu" == local) && ("" == uri)) {
				return true;
			}
			if (("move_nodes_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_string" == local) && ("" == uri)) {
				return true;
			}
			if (("menu_checked_action" == local) && ("" == uri)) {
				return true;
			}
			if (("font_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("arrow_link_point_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("paste_node_action" == local) && ("" == uri)) {
				return true;
			}
			// CLOUDS
			// if (("add_cloud_xml_action" == local) && ("" == uri)) {
			// return true;
			// }
			if (("new_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_action" == local) && ("" == uri)) {
				return true;
			}
			if (("italic_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("time_window_column_setting" == local) && ("" == uri)) {
				return true;
			}
			if (("menu_separator" == local) && ("" == uri)) {
				return true;
			}
			if (("menu_action" == local) && ("" == uri)) {
				return true;
			}
			if (("edge_width_format_action" == local) && ("" == uri)) {
				return true;
			}
			if (("undo_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("transferable_content" == local) && ("" == uri)) {
				return true;
			}
			if (("select_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_property" == local) && ("" == uri)) {
				return true;
			}
			if (("move_node_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("font_size_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("add_link_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin" == local) && ("" == uri)) {
				return true;
			}
			if (("arrow_link_color_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("edge_color_format_action" == local) && ("" == uri)) {
				return true;
			}
			if (("remove_arrow_link_xml_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_mode" == local) && ("" == uri)) {
				return true;
			}
			if (("bold_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("underlined_node_action" == local) && ("" == uri)) {
				return true;
			}
			if (("fold_action" == local) && ("" == uri)) {
				return true;
			}
			if (("plugin_classpath" == local) && ("" == uri)) {
				return true;
			}
			if (("compound_action" == local) && ("" == uri)) {
				return true;
			}
			if (("node_background_color_format_action" == local) && ("" == uri)) {
				return true;
			}
			if (("node_list_member" == local) && ("" == uri)) {
				return true;
			}
			return false;
		}

		public java.lang.String[] getProbePoints() {
			return new java.lang.String[] { "",
					"time_window_configuration_storage", "",
					"hook_node_action", "", "remove_all_icons_xml_action", "",
					"menu_category", "", "plugin_strings", "",
					"edit_node_action", "", "node_color_format_action", "",
					"normal_window_configuration_storage", "",
					"add_arrow_link_xml_action", "", "revert_xml_action", "",
					"option_panel_window_configuration_storage", "",
					"plugin_registration", "", "delete_node_action", "",
					"menu_submenu", "", "node_style_format_action", "",
					"edge_style_format_action", "", "cloud_color_xml_action",
					"", "menu_structure", "", "add_icon_action", "",
					"cut_node_action", "", "collaboration_action", "",
					"arrow_link_arrow_xml_action", "",
					"remove_last_icon_xml_action", "", "plugin_menu", "",
					"move_nodes_action", "", "plugin_string", "",
					"menu_checked_action", "", "font_node_action", "",
					"arrow_link_point_xml_action", "", "paste_node_action", "",
					"add_cloud_xml_action", "", "new_node_action", "",
					"plugin_action", "", "italic_node_action", "",
					"time_window_column_setting", "", "menu_separator", "",
					"menu_action", "", "edge_width_format_action", "",
					"undo_xml_action", "", "transferable_content", "",
					"select_node_action", "", "plugin_property", "",
					"move_node_xml_action", "", "font_size_node_action", "",
					"add_link_xml_action", "", "plugin", "",
					"arrow_link_color_xml_action", "",
					"edge_color_format_action", "",
					"remove_arrow_link_xml_action", "", "plugin_mode", "",
					"bold_node_action", "", "underlined_node_action", "",
					"fold_action", "", "plugin_classpath", "",
					"compound_action", "",
					"node_background_color_format_action", "",
					"node_list_member" };
		}

	}

}
