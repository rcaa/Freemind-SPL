//CLOUDS
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.02.23 at 11:11:43 GMT+01:00 
//

package freemind.clouds;

public class AddCloudXmlActionTypeImpl extends
		freemind.controller.actions.generated.instance.impl.NodeActionImpl
		implements
		freemind.clouds.AddCloudXmlActionType,
		com.sun.xml.bind.JAXBObject,
		freemind.controller.actions.generated.instance.impl.runtime.UnmarshallableObject,
		freemind.controller.actions.generated.instance.impl.runtime.XMLSerializable,
		freemind.controller.actions.generated.instance.impl.runtime.ValidatableObject {

	protected boolean has_Enabled;
	protected boolean _Enabled;
	protected java.lang.String _Color;
	public final static java.lang.Class version = (freemind.controller.actions.generated.instance.impl.JAXBVersion.class);
	private static com.sun.msv.grammar.Grammar schemaFragment;

	private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
		return (freemind.clouds.AddCloudXmlActionType.class);
	}

	public boolean isEnabled() {
		return _Enabled;
	}

	public void setEnabled(boolean value) {
		_Enabled = value;
		has_Enabled = true;
	}

	public java.lang.String getColor() {
		return _Color;
	}

	public void setColor(java.lang.String value) {
		_Color = value;
	}

	public freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingEventHandler createUnmarshaller(
			freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
		return new freemind.clouds.AddCloudXmlActionTypeImpl.Unmarshaller(
				context);
	}

	public void serializeElementBody(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		super.serializeElementBody(context);
	}

	public void serializeAttributes(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		context.startAttribute("", "enabled");
		try {
			context.text(javax.xml.bind.DatatypeConverter
					.printBoolean(((boolean) _Enabled)));
		} catch (java.lang.Exception e) {
			freemind.controller.actions.generated.instance.impl.runtime.Util
					.handlePrintConversionException(this, e, context);
		}
		context.endAttribute();
		if (_Color != null) {
			context.startAttribute("", "color");
			try {
				context.text(((java.lang.String) _Color));
			} catch (java.lang.Exception e) {
				freemind.controller.actions.generated.instance.impl.runtime.Util
						.handlePrintConversionException(this, e, context);
			}
			context.endAttribute();
		}
		super.serializeAttributes(context);
	}

	public void serializeAttributeBody(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		super.serializeAttributeBody(context);
	}

	public void serializeURIs(
			freemind.controller.actions.generated.instance.impl.runtime.XMLSerializer context)
			throws org.xml.sax.SAXException {
		super.serializeURIs(context);
	}

	public java.lang.Class getPrimaryInterface() {
		return (freemind.clouds.AddCloudXmlActionType.class);
	}

	public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
		if (schemaFragment == null) {
			schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer
					.deserialize(("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
							+ "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
							+ "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
							+ "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
							+ "/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\b\u00c3nmppsq\u0000~\u0000\u0000\u0006O\u00f6Zppsr\u0000 com"
							+ ".sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameCl"
							+ "asst\u0000\u001fLcom/sun/msv/grammar/NameClass;xq\u0000~\u0000\u0003\u0003:\u000e\u00a3ppsr\u0000\u001bcom.sun"
							+ ".msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype"
							+ "/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPa"
							+ "ir;xq\u0000~\u0000\u0003\u0001\u0086\u00d4\u0094ppsr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAto"
							+ "micType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000"
							+ "\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
							+ "\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0012L\u0000\nw"
							+ "hiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xp"
							+ "t\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv."
							+ "datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com."
							+ "sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000co"
							+ "m.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000"
							+ "~\u0000\u0003\u0000\u0000\u0000\nppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalN"
							+ "ameq\u0000~\u0000\u0012L\u0000\fnamespaceURIq\u0000~\u0000\u0012xpq\u0000~\u0000\u0016q\u0000~\u0000\u0015sr\u0000#com.sun.msv.gram"
							+ "mar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0012L\u0000\fnamespaceU"
							+ "RIq\u0000~\u0000\u0012xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004node"
							+ "t\u0000\u0000sq\u0000~\u0000\u0007\u0003\u0015\u00e7\u00b2ppsq\u0000~\u0000\n\u0001\u00d8\u00d3\u00afppsr\u0000$com.sun.msv.datatype.xsd.Bool"
							+ "eanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u000fq\u0000~\u0000\u0015t\u0000\u0007booleansr\u00005com.sun.msv.datat"
							+ "ype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0018q\u0000~\u0000\u001bsq"
							+ "\u0000~\u0000\u001cq\u0000~\u0000\'q\u0000~\u0000\u0015sq\u0000~\u0000\u001et\u0000\u0007enabledq\u0000~\u0000\"sr\u0000\u001dcom.sun.msv.grammar.C"
							+ "hoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0002sx\u000eppsq\u0000~\u0000\u0007\u0002sx\u0003sr\u0000\u0011java.lang.Boole"
							+ "an\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000pq\u0000~\u0000\rsq\u0000~\u0000\u001et\u0000\u0005colorq\u0000~\u0000\"sr\u00000com.sun"
							+ ".msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000"
							+ "\u0000\tsq\u0000~\u00000\u0001q\u0000~\u00005sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
							+ "\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedH"
							+ "ash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef"
							+ "\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u00008[\u0000\u0005tablet\u0000![Lcom/sun"
							+ "/msv/grammar/Expression;xp\u0000\u0000\u0000\u0003\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar"
							+ ".Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppppppppppppppq\u0000~\u0000\u0005pppppp"
							+ "ppppppppppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000.ppp"
							+ "ppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0006ppppppppppp"
							+ "pppppppppppppppppppppppppppppppppppppppppppppppppppp"));
		}
		return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
				schemaFragment);
	}

	public class Unmarshaller
			extends
			freemind.controller.actions.generated.instance.impl.runtime.AbstractUnmarshallingEventHandlerImpl {

		public Unmarshaller(
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context) {
			super(context, "--------");
		}

		protected Unmarshaller(
				freemind.controller.actions.generated.instance.impl.runtime.UnmarshallingContext context,
				int startState) {
			this(context);
			state = startState;
		}

		public java.lang.Object owner() {
			return freemind.clouds.AddCloudXmlActionTypeImpl.this;
		}

		public void enterElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname,
				org.xml.sax.Attributes __atts) throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 6:
					attIdx = context.getAttribute("", "node");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().enterElement(___uri,
								___local, ___qname, __atts);
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "enabled");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						eatText0(v);
						state = 3;
						continue outer;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "color");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						eatText1(v);
						state = 6;
						continue outer;
					}
					state = 6;
					continue outer;
				case 7:
					revertToParentFromEnterElement(___uri, ___local, ___qname,
							__atts);
					return;
				}
				super.enterElement(___uri, ___local, ___qname, __atts);
				break;
			}
		}

		private void eatText0(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Enabled = javax.xml.bind.DatatypeConverter
						.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor
								.collapse(value));
				has_Enabled = true;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		private void eatText1(final java.lang.String value)
				throws org.xml.sax.SAXException {
			try {
				_Color = value;
			} catch (java.lang.Exception e) {
				handleParseConversionException(e);
			}
		}

		public void leaveElement(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 6:
					attIdx = context.getAttribute("", "node");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveElement(___uri,
								___local, ___qname);
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "enabled");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						eatText0(v);
						state = 3;
						continue outer;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "color");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						eatText1(v);
						state = 6;
						continue outer;
					}
					state = 6;
					continue outer;
				case 7:
					revertToParentFromLeaveElement(___uri, ___local, ___qname);
					return;
				}
				super.leaveElement(___uri, ___local, ___qname);
				break;
			}
		}

		public void enterAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 6:
					if (("node" == ___local) && ("" == ___uri)) {
						spawnHandlerFromEnterAttribute(
								(((freemind.controller.actions.generated.instance.impl.NodeActionImpl) freemind.clouds.AddCloudXmlActionTypeImpl.this).new Unmarshaller(
										context)), 7, ___uri, ___local,
								___qname);
						return;
					}
					break;
				case 0:
					if (("enabled" == ___local) && ("" == ___uri)) {
						state = 1;
						return;
					}
					break;
				case 3:
					if (("color" == ___local) && ("" == ___uri)) {
						state = 4;
						return;
					}
					state = 6;
					continue outer;
				case 7:
					revertToParentFromEnterAttribute(___uri, ___local, ___qname);
					return;
				}
				super.enterAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void leaveAttribute(java.lang.String ___uri,
				java.lang.String ___local, java.lang.String ___qname)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				switch (state) {
				case 6:
					attIdx = context.getAttribute("", "node");
					if (attIdx >= 0) {
						context.consumeAttribute(attIdx);
						context.getCurrentHandler().leaveAttribute(___uri,
								___local, ___qname);
						return;
					}
					break;
				case 0:
					attIdx = context.getAttribute("", "enabled");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						eatText0(v);
						state = 3;
						continue outer;
					}
					break;
				case 3:
					attIdx = context.getAttribute("", "color");
					if (attIdx >= 0) {
						final java.lang.String v = context.eatAttribute(attIdx);
						eatText1(v);
						state = 6;
						continue outer;
					}
					state = 6;
					continue outer;
				case 2:
					if (("enabled" == ___local) && ("" == ___uri)) {
						state = 3;
						return;
					}
					break;
				case 7:
					revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
					return;
				case 5:
					if (("color" == ___local) && ("" == ___uri)) {
						state = 6;
						return;
					}
					break;
				}
				super.leaveAttribute(___uri, ___local, ___qname);
				break;
			}
		}

		public void handleText(final java.lang.String value)
				throws org.xml.sax.SAXException {
			int attIdx;
			outer: while (true) {
				try {
					switch (state) {
					case 6:
						attIdx = context.getAttribute("", "node");
						if (attIdx >= 0) {
							context.consumeAttribute(attIdx);
							context.getCurrentHandler().text(value);
							return;
						}
						break;
					case 0:
						attIdx = context.getAttribute("", "enabled");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							eatText0(v);
							state = 3;
							continue outer;
						}
						break;
					case 3:
						attIdx = context.getAttribute("", "color");
						if (attIdx >= 0) {
							final java.lang.String v = context
									.eatAttribute(attIdx);
							eatText1(v);
							state = 6;
							continue outer;
						}
						state = 6;
						continue outer;
					case 1:
						eatText0(value);
						state = 2;
						return;
					case 7:
						revertToParentFromText(value);
						return;
					case 4:
						eatText1(value);
						state = 5;
						return;
					}
				} catch (java.lang.RuntimeException e) {
					handleUnexpectedTextException(value, e);
				}
				break;
			}
		}

	}

}
